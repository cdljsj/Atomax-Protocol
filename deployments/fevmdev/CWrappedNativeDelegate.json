{
  "address": "0xde6De2d84d0772690a8d850c7E2b6454A3c8c9cB",
  "abi": [
    {
      "inputs": [],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "AcceptAdminPendingAdminCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "actualAddAmount",
          "type": "uint256"
        }
      ],
      "name": "AddReservesFactorFreshCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowCashNotAvailable",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "BorrowComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "BorrowRateTooHigh",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InitialExchangeRateCannotBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidContractAddress",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateAccrueBorrowInterestFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateAccrueCollateralInterestFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateCloseAmountIsUintMax",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateCloseAmountIsZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateCollateralFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateLiquidatorIsBorrower",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateRepayBorrowFreshFailed",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "LiquidateSeizeComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateSeizeLiquidatorIsBorrower",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "LiquidateSizeTooMuch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MarketAlreadyInitialized",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "MintComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MintFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotComptroller",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "RedeemComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemTokensInOrRedeemAmountInShouldBeZero",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RedeemTransferOutNotPossible",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesAdminCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesCashNotAvailable",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesCashValidation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ReduceReservesFreshCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrowComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "RepayBorrowFreshnessCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetComptrollerOwnerCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetInterestRateModelFreshCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetInterestRateModelOwnerCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetPendingAdminOwnerCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetReserveFactorAdminCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetReserveFactorBoundsCheck",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "SetReserveFactorFreshCheck",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorCode",
          "type": "uint256"
        }
      ],
      "name": "TransferComptrollerRejection",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferNotEnough",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "TransferTooMuch",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cashPrior",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "interestAccumulated",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "AccrueInterest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "Borrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "cTokenCollateral",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "LiquidateBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "minter",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "mintTokens",
          "type": "uint256"
        }
      ],
      "name": "Mint",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "NewAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "oldComptroller",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "NewComptroller",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "oldInterestRateModel",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "NewMarketInterestRateModel",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldPendingAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "NewPendingAdmin",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldReserveFactorMantissa",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "NewReserveFactor",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "redeemer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "Redeem",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "payer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accountBorrows",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "totalBorrows",
          "type": "uint256"
        }
      ],
      "name": "RepayBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "benefactor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "addAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newTotalReserves",
          "type": "uint256"
        }
      ],
      "name": "ReservesReduced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NO_ERROR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_acceptAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "_becomeImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reduceAmount",
          "type": "uint256"
        }
      ],
      "name": "_reduceReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "_resignImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "newComptroller",
          "type": "address"
        }
      ],
      "name": "_setComptroller",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "newInterestRateModel",
          "type": "address"
        }
      ],
      "name": "_setInterestRateModel",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "newPendingAdmin",
          "type": "address"
        }
      ],
      "name": "_setPendingAdmin",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "newReserveFactorMantissa",
          "type": "uint256"
        }
      ],
      "name": "_setReserveFactor",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrualBlockNumber",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "accrueInterest",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "admin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOfUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "borrowAmount",
          "type": "uint256"
        }
      ],
      "name": "borrow",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "borrowBalanceStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "borrowRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "comptroller",
      "outputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exchangeRateStored",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getAccountSnapshot",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCash",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "underlying_",
          "type": "address"
        },
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract ComptrollerInterface",
          "name": "comptroller_",
          "type": "address"
        },
        {
          "internalType": "contract InterestRateModel",
          "name": "interestRateModel_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "initialExchangeRateMantissa_",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "string",
          "name": "symbol_",
          "type": "string"
        },
        {
          "internalType": "uint8",
          "name": "decimals_",
          "type": "uint8"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "interestRateModel",
      "outputs": [
        {
          "internalType": "contract InterestRateModel",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isCToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "isNativeToken",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "contract CToken",
          "name": "cTokenCollateral",
          "type": "address"
        }
      ],
      "name": "liquidateBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "mint",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingAdmin",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "protocolSeizeShareMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemTokens",
          "type": "uint256"
        }
      ],
      "name": "redeem",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "redeemAmount",
          "type": "uint256"
        }
      ],
      "name": "redeemUnderlying",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "repayBorrow",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        }
      ],
      "name": "repayBorrowBehalf",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "repayAmount",
          "type": "uint256"
        }
      ],
      "name": "repayWithDeposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reserveFactorMantissa",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrower",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "seizeTokens",
          "type": "uint256"
        }
      ],
      "name": "seize",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "supplyRatePerBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrows",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalBorrowsCurrent",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalReserves",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "src",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "dst",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "underlying",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x1027779bb2bbcdd481afe2580c1b8c3dcf2abfe82cfccca163e185e11bcfa269",
  "receipt": {
    "to": null,
    "from": "0x2280C50eF73550b7Ac71AaCd1d6485B3120c2c46",
    "contractAddress": "0xde6De2d84d0772690a8d850c7E2b6454A3c8c9cB",
    "transactionIndex": 0,
    "gasUsed": "103648930",
    "logsBloom": "0x
    "blockHash": "0xfb10af83253c95157b92605faca33c0dc8dc904fe3cfe27cb02dda3e0552d50a",
    "transactionHash": "0x1027779bb2bbcdd481afe2580c1b8c3dcf2abfe82cfccca163e185e11bcfa269",
    "logs": [],
    "blockNumber": 427364,
    "cumulativeGasUsed": "0",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "1cab44790c86e06d742108d49156cc3e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"AcceptAdminPendingAdminCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"actualAddAmount\",\"type\":\"uint256\"}],\"name\":\"AddReservesFactorFreshCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"BorrowComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"BorrowRateTooHigh\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InitialExchangeRateCannotBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidContractAddress\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateAccrueBorrowInterestFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateAccrueCollateralInterestFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCloseAmountIsUintMax\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCloseAmountIsZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateCollateralFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateLiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateRepayBorrowFreshFailed\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"LiquidateSeizeComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateSeizeLiquidatorIsBorrower\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"LiquidateSizeTooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MarketAlreadyInitialized\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"MintComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MintFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotComptroller\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RedeemComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemTokensInOrRedeemAmountInShouldBeZero\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RedeemTransferOutNotPossible\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesAdminCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashNotAvailable\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesCashValidation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ReduceReservesFreshCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"RepayBorrowComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"RepayBorrowFreshnessCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetComptrollerOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelFreshCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetInterestRateModelOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetPendingAdminOwnerCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorAdminCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorBoundsCheck\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"SetReserveFactorFreshCheck\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorCode\",\"type\":\"uint256\"}],\"name\":\"TransferComptrollerRejection\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferNotEnough\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"TransferTooMuch\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cashPrior\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"interestAccumulated\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"AccrueInterest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"Borrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"cTokenCollateral\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"LiquidateBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"minter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"mintTokens\",\"type\":\"uint256\"}],\"name\":\"Mint\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"NewAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"oldComptroller\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"NewComptroller\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"oldInterestRateModel\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"NewMarketInterestRateModel\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldPendingAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"NewPendingAdmin\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldReserveFactorMantissa\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"NewReserveFactor\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"redeemer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"Redeem\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"payer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accountBorrows\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"totalBorrows\",\"type\":\"uint256\"}],\"name\":\"RepayBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"benefactor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"addAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newTotalReserves\",\"type\":\"uint256\"}],\"name\":\"ReservesReduced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NO_ERROR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_acceptAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"_becomeImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reduceAmount\",\"type\":\"uint256\"}],\"name\":\"_reduceReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"_resignImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"newComptroller\",\"type\":\"address\"}],\"name\":\"_setComptroller\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"newInterestRateModel\",\"type\":\"address\"}],\"name\":\"_setInterestRateModel\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"newPendingAdmin\",\"type\":\"address\"}],\"name\":\"_setPendingAdmin\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newReserveFactorMantissa\",\"type\":\"uint256\"}],\"name\":\"_setReserveFactor\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrualBlockNumber\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"accrueInterest\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"admin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOfUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"}],\"name\":\"borrow\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"borrowBalanceStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"borrowRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"comptroller\",\"outputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exchangeRateStored\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getAccountSnapshot\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCash\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"underlying_\",\"type\":\"address\"},{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract ComptrollerInterface\",\"name\":\"comptroller_\",\"type\":\"address\"},{\"internalType\":\"contract InterestRateModel\",\"name\":\"interestRateModel_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"initialExchangeRateMantissa_\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"string\",\"name\":\"symbol_\",\"type\":\"string\"},{\"internalType\":\"uint8\",\"name\":\"decimals_\",\"type\":\"uint8\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"interestRateModel\",\"outputs\":[{\"internalType\":\"contract InterestRateModel\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isCToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"isNativeToken\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"contract CToken\",\"name\":\"cTokenCollateral\",\"type\":\"address\"}],\"name\":\"liquidateBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"mint\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingAdmin\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"protocolSeizeShareMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemTokens\",\"type\":\"uint256\"}],\"name\":\"redeem\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"redeemAmount\",\"type\":\"uint256\"}],\"name\":\"redeemUnderlying\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"repayBorrow\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"}],\"name\":\"repayBorrowBehalf\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"repayAmount\",\"type\":\"uint256\"}],\"name\":\"repayWithDeposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reserveFactorMantissa\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrower\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"seizeTokens\",\"type\":\"uint256\"}],\"name\":\"seize\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"supplyRatePerBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrows\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalBorrowsCurrent\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalReserves\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"src\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"dst\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"underlying\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"author\":\"Compound\",\"kind\":\"dev\",\"methods\":{\"_acceptAdmin()\":{\"details\":\"Admin function for pending admin to accept role and update admin\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_becomeImplementation(bytes)\":{\"params\":{\"data\":\"The encoded bytes data for any initialization\"}},\"_reduceReserves(uint256)\":{\"params\":{\"reduceAmount\":\"Amount of reduction to reserves\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setComptroller(address)\":{\"details\":\"Admin function to set a new comptroller\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setInterestRateModel(address)\":{\"details\":\"Admin function to accrue interest and update the interest rate model\",\"params\":{\"newInterestRateModel\":\"the new interest rate model to use\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setPendingAdmin(address)\":{\"details\":\"Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\",\"params\":{\"newPendingAdmin\":\"New pending admin.\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"_setReserveFactor(uint256)\":{\"details\":\"Admin function to accrue interest and set a new reserve factor\",\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"accrueInterest()\":{\"details\":\"This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage.\"},\"allowance(address,address)\":{\"params\":{\"owner\":\"The address of the account which owns the tokens to be spent\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"The number of tokens allowed to be spent (-1 means infinite)\"}},\"approve(address,uint256)\":{\"details\":\"This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\",\"params\":{\"amount\":\"The number of tokens that are approved (uint256.max means infinite)\",\"spender\":\"The address of the account which may transfer tokens\"},\"returns\":{\"_0\":\"Whether or not the approval succeeded\"}},\"balanceOf(address)\":{\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The number of tokens owned by `owner`\"}},\"balanceOfUnderlying(address)\":{\"details\":\"This also accrues interest in a transaction\",\"params\":{\"owner\":\"The address of the account to query\"},\"returns\":{\"_0\":\"The amount of underlying owned by `owner`\"}},\"borrow(uint256)\":{\"params\":{\"borrowAmount\":\"The amount of the underlying asset to borrow\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"borrowBalanceCurrent(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated after updating borrowIndex\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowBalanceStored(address)\":{\"params\":{\"account\":\"The address whose balance should be calculated\"},\"returns\":{\"_0\":\"The calculated balance\"}},\"borrowRatePerBlock()\":{\"returns\":{\"_0\":\"The borrow interest rate per block, scaled by 1e18\"}},\"exchangeRateCurrent()\":{\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"exchangeRateStored()\":{\"details\":\"This function does not accrue interest before calculating the exchange rate\",\"returns\":{\"_0\":\"Calculated exchange rate scaled by 1e18\"}},\"getAccountSnapshot(address)\":{\"details\":\"This is used by comptroller to more efficiently perform liquidity checks.\",\"params\":{\"account\":\"Address of the account to snapshot\"},\"returns\":{\"_0\":\"(possible error, token balance, borrow balance, exchange rate mantissa)\"}},\"getCash()\":{\"returns\":{\"_0\":\"The quantity of underlying asset owned by this contract\"}},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"ERC-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"ERC-20 name of this token\",\"symbol_\":\"ERC-20 symbol of this token\",\"underlying_\":\"The address of the underlying asset\"}},\"initialize(address,address,uint256,string,string,uint8)\":{\"params\":{\"comptroller_\":\"The address of the Comptroller\",\"decimals_\":\"EIP-20 decimal precision of this token\",\"initialExchangeRateMantissa_\":\"The initial exchange rate, scaled by 1e18\",\"interestRateModel_\":\"The address of the interest rate model\",\"name_\":\"EIP-20 name of this token\",\"symbol_\":\"EIP-20 symbol of this token\"}},\"liquidateBorrow(address,address)\":{\"details\":\"Reverts upon any failure\",\"params\":{\"borrower\":\"The borrower of this cToken to be liquidated\",\"cTokenCollateral\":\"The market in which to seize collateral from the borrower\"}},\"mint()\":{\"details\":\"Reverts upon any failure\"},\"redeem(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemTokens\":\"The number of cTokens to redeem into underlying\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"redeemUnderlying(uint256)\":{\"details\":\"Accrues interest whether or not the operation succeeds, unless reverted\",\"params\":{\"redeemAmount\":\"The amount of underlying to redeem\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"repayBorrowBehalf(address)\":{\"params\":{\"borrower\":\"the account with the debt being payed off\"}},\"seize(address,address,uint256)\":{\"details\":\"Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\",\"params\":{\"borrower\":\"The account having collateral seized\",\"liquidator\":\"The account receiving seized collateral\",\"seizeTokens\":\"The number of cTokens to seize\"},\"returns\":{\"_0\":\"uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\"}},\"supplyRatePerBlock()\":{\"returns\":{\"_0\":\"The supply interest rate per block, scaled by 1e18\"}},\"totalBorrowsCurrent()\":{\"returns\":{\"_0\":\"The total borrows with interest\"}},\"transfer(address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}},\"transferFrom(address,address,uint256)\":{\"params\":{\"amount\":\"The number of tokens to transfer\",\"dst\":\"The address of the destination account\",\"src\":\"The address of the source account\"},\"returns\":{\"_0\":\"Whether or not the transfer succeeded\"}}},\"title\":\"Compound's CErc20Delegate Contract\",\"version\":1},\"userdoc\":{\"events\":{\"AccrueInterest(uint256,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when interest is accrued\"},\"Approval(address,address,uint256)\":{\"notice\":\"EIP20 Approval event\"},\"Borrow(address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when underlying is borrowed\"},\"LiquidateBorrow(address,address,uint256,address,uint256)\":{\"notice\":\"Event emitted when a borrow is liquidated\"},\"Mint(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are minted\"},\"NewAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is accepted, which means admin is updated\"},\"NewComptroller(address,address)\":{\"notice\":\"Event emitted when comptroller is changed\"},\"NewMarketInterestRateModel(address,address)\":{\"notice\":\"Event emitted when interestRateModel is changed\"},\"NewPendingAdmin(address,address)\":{\"notice\":\"Event emitted when pendingAdmin is changed\"},\"NewReserveFactor(uint256,uint256)\":{\"notice\":\"Event emitted when the reserve factor is changed\"},\"Redeem(address,uint256,uint256)\":{\"notice\":\"Event emitted when tokens are redeemed\"},\"RepayBorrow(address,address,uint256,uint256,uint256)\":{\"notice\":\"Event emitted when a borrow is repaid\"},\"ReservesAdded(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are added\"},\"ReservesReduced(address,uint256,uint256)\":{\"notice\":\"Event emitted when the reserves are reduced\"},\"Transfer(address,address,uint256)\":{\"notice\":\"EIP20 Transfer event\"}},\"kind\":\"user\",\"methods\":{\"_acceptAdmin()\":{\"notice\":\"Accepts transfer of admin rights. msg.sender must be pendingAdmin\"},\"_becomeImplementation(bytes)\":{\"notice\":\"Called by the delegator on a delegate to initialize it for duty\"},\"_reduceReserves(uint256)\":{\"notice\":\"Accrues interest and reduces reserves by transferring to admin\"},\"_resignImplementation()\":{\"notice\":\"Called by the delegator on a delegate to forfeit its responsibility\"},\"_setComptroller(address)\":{\"notice\":\"Sets a new comptroller for the market\"},\"_setInterestRateModel(address)\":{\"notice\":\"accrues interest and updates the interest rate model using _setInterestRateModelFresh\"},\"_setPendingAdmin(address)\":{\"notice\":\"Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\"},\"_setReserveFactor(uint256)\":{\"notice\":\"accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\"},\"accrualBlockNumber()\":{\"notice\":\"Block number that interest was last accrued at\"},\"accrueInterest()\":{\"notice\":\"Applies accrued interest to total borrows and reserves\"},\"admin()\":{\"notice\":\"Administrator for this contract\"},\"allowance(address,address)\":{\"notice\":\"Get the current allowance from `owner` for `spender`\"},\"approve(address,uint256)\":{\"notice\":\"Approve `spender` to transfer up to `amount` from `src`\"},\"balanceOf(address)\":{\"notice\":\"Get the token balance of the `owner`\"},\"balanceOfUnderlying(address)\":{\"notice\":\"Get the underlying balance of the `owner`\"},\"borrow(uint256)\":{\"notice\":\"Sender borrows assets from the protocol to their own address\"},\"borrowBalanceCurrent(address)\":{\"notice\":\"Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\"},\"borrowBalanceStored(address)\":{\"notice\":\"Return the borrow balance of account based on stored data\"},\"borrowIndex()\":{\"notice\":\"Accumulator of the total earned interest rate since the opening of the market\"},\"borrowRatePerBlock()\":{\"notice\":\"Returns the current per-block borrow interest rate for this cToken\"},\"comptroller()\":{\"notice\":\"Contract which oversees inter-cToken operations\"},\"constructor\":{\"notice\":\"Construct an empty delegate\"},\"decimals()\":{\"notice\":\"EIP-20 token decimals for this token\"},\"exchangeRateCurrent()\":{\"notice\":\"Accrue interest then return the up-to-date exchange rate\"},\"exchangeRateStored()\":{\"notice\":\"Calculates the exchange rate from the underlying to the CToken\"},\"getAccountSnapshot(address)\":{\"notice\":\"Get a snapshot of the account's balances, and the cached exchange rate\"},\"getCash()\":{\"notice\":\"Get cash balance of this cToken in the underlying asset\"},\"implementation()\":{\"notice\":\"Implementation address for this contract\"},\"initialize(address,address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the new money market\"},\"initialize(address,address,uint256,string,string,uint8)\":{\"notice\":\"Initialize the money market\"},\"interestRateModel()\":{\"notice\":\"Model which tells what the current interest rate should be\"},\"isCToken()\":{\"notice\":\"Indicator that this is a CToken contract (for inspection)\"},\"liquidateBorrow(address,address)\":{\"notice\":\"The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator.\"},\"mint()\":{\"notice\":\"Sender supplies assets into the market and receives cTokens in exchange\"},\"name()\":{\"notice\":\"EIP-20 token name for this token\"},\"pendingAdmin()\":{\"notice\":\"Pending administrator for this contract\"},\"protocolSeizeShareMantissa()\":{\"notice\":\"Share of seized collateral that is added to reserves\"},\"redeem(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for the underlying asset\"},\"redeemUnderlying(uint256)\":{\"notice\":\"Sender redeems cTokens in exchange for a specified amount of underlying asset\"},\"repayBorrow()\":{\"notice\":\"Sender repays their own borrow\"},\"repayBorrowBehalf(address)\":{\"notice\":\"Sender repays a borrow belonging to borrower\"},\"reserveFactorMantissa()\":{\"notice\":\"Fraction of interest currently set aside for reserves\"},\"seize(address,address,uint256)\":{\"notice\":\"Transfers collateral tokens (this market) to the liquidator.\"},\"supplyRatePerBlock()\":{\"notice\":\"Returns the current per-block supply interest rate for this cToken\"},\"symbol()\":{\"notice\":\"EIP-20 token symbol for this token\"},\"totalBorrows()\":{\"notice\":\"Total amount of outstanding borrows of the underlying in this market\"},\"totalBorrowsCurrent()\":{\"notice\":\"Returns the current total borrows plus accrued interest\"},\"totalReserves()\":{\"notice\":\"Total amount of reserves of the underlying held in this market\"},\"totalSupply()\":{\"notice\":\"Total number of tokens in circulation\"},\"transfer(address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `msg.sender` to `dst`\"},\"transferFrom(address,address,uint256)\":{\"notice\":\"Transfer `amount` tokens from `src` to `dst`\"},\"underlying()\":{\"notice\":\"Underlying asset for this CToken\"}},\"notice\":\"CTokens which wrap an EIP-20 underlying and are delegated to\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/CWrappedNativeDelegate.sol\":\"CWrappedNativeDelegate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/CToken.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./Interfaces/ComptrollerInterface.sol\\\";\\nimport \\\"./Interfaces/CTokenInterfaces.sol\\\";\\nimport \\\"./ErrorReporter.sol\\\";\\nimport \\\"./Interfaces/EIP20Interface.sol\\\";\\nimport \\\"./Interfaces/InterestRateModel.sol\\\";\\nimport \\\"./Interfaces/ISmartAccountFactory.sol\\\";\\nimport \\\"./Interfaces/ISmartAccount.sol\\\";\\nimport \\\"./FixedMath.sol\\\";\\n\\n/**\\n * @title Compound's CToken Contract\\n * @notice Abstract base for CTokens\\n * @author Compound\\n */\\nabstract contract CToken is CTokenInterface, TokenErrorReporter {\\n    /**\\n     * @notice Initialize the money market\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ EIP-20 name of this token\\n     * @param symbol_ EIP-20 symbol of this token\\n     * @param decimals_ EIP-20 decimal precision of this token\\n     */\\n    function initialize(ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        if (msg.sender != admin) revert Unauthorized();\\n        if (accrualBlockNumber != 0 || borrowIndex != 0) revert MarketAlreadyInitialized();\\n\\n        // Set initial exchange rate\\n        initialExchangeRateMantissa = initialExchangeRateMantissa_;\\n        if (initialExchangeRateMantissa == 0) revert InitialExchangeRateCannotBeZero();\\n\\n        // Set the comptroller\\n        _setComptroller(comptroller_);\\n\\n        // Initialize block number and borrow index (block number mocks depend on comptroller being set)\\n        accrualBlockNumber = getBlockNumber();\\n        borrowIndex = FixedMath.mantissaOne;\\n\\n        // Set the interest rate model (depends on block number / borrow index)\\n        _setInterestRateModelFresh(interestRateModel_);\\n\\n        name = name_;\\n        symbol = symbol_;\\n        decimals = decimals_;\\n\\n        // The counter starts true to prevent changing it from zero to non-zero (i.e. smaller cost/refund)\\n        _notEntered = true;\\n    }\\n\\n    /**\\n     * @notice Transfer `tokens` tokens from `src` to `dst` by `spender`\\n     * @dev Called by both `transfer` and `transferFrom` internally\\n     * @param spender The address of the account performing the transfer\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param tokens The number of tokens to transfer\\n     * @return 0 if the transfer succeeded, else revert\\n     */\\n    function transferTokens(address spender, address src, address dst, uint tokens) internal returns (uint) {\\n        /* Fail if transfer not allowed */\\n        uint allowed = comptroller.transferAllowed(address(this), src, dst, tokens);\\n        if (allowed != 0) {\\n            revert TransferComptrollerRejection(allowed);\\n        }\\n\\n        /* Do not allow self-transfers */\\n        if (src == dst) {\\n            revert TransferNotAllowed();\\n        }\\n\\n        /* Get the allowance, infinite for the account owner */\\n        uint startingAllowance = 0;\\n        if (spender == src) {\\n            startingAllowance = type(uint).max;\\n        } else {\\n            startingAllowance = transferAllowances[src][spender];\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        accountTokens[src] = accountTokens[src] - tokens;\\n        accountTokens[dst] = accountTokens[dst] + tokens;\\n\\n        /* Eat some of the allowance (if necessary) */\\n        if (startingAllowance != type(uint).max) {\\n            transferAllowances[src][spender] = startingAllowance - tokens;\\n        }\\n\\n        /* We emit a Transfer event */\\n        emit Transfer(src, dst, tokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transfer(address dst, uint256 amount) override external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, msg.sender, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfer `amount` tokens from `src` to `dst`\\n     * @param src The address of the source account\\n     * @param dst The address of the destination account\\n     * @param amount The number of tokens to transfer\\n     * @return Whether or not the transfer succeeded\\n     */\\n    function transferFrom(address src, address dst, uint256 amount) override external nonReentrant returns (bool) {\\n        return transferTokens(msg.sender, src, dst, amount) == NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Approve `spender` to transfer up to `amount` from `src`\\n     * @dev This will overwrite the approval amount for `spender`\\n     *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n     * @param spender The address of the account which may transfer tokens\\n     * @param amount The number of tokens that are approved (uint256.max means infinite)\\n     * @return Whether or not the approval succeeded\\n     */\\n    function approve(address spender, uint256 amount) override external returns (bool) {\\n        address src = msg.sender;\\n        transferAllowances[src][spender] = amount;\\n        emit Approval(src, spender, amount);\\n        return true;\\n    }\\n\\n    /**\\n     * @notice Get the current allowance from `owner` for `spender`\\n     * @param owner The address of the account which owns the tokens to be spent\\n     * @param spender The address of the account which may transfer tokens\\n     * @return The number of tokens allowed to be spent (-1 means infinite)\\n     */\\n    function allowance(address owner, address spender) override external view returns (uint256) {\\n        return transferAllowances[owner][spender];\\n    }\\n\\n    /**\\n     * @notice Get the token balance of the `owner`\\n     * @param owner The address of the account to query\\n     * @return The number of tokens owned by `owner`\\n     */\\n    function balanceOf(address owner) override external view returns (uint256) {\\n        return accountTokens[owner];\\n    }\\n\\n    /**\\n     * @notice Get the underlying balance of the `owner`\\n     * @dev This also accrues interest in a transaction\\n     * @param owner The address of the account to query\\n     * @return The amount of underlying owned by `owner`\\n     */\\n    function balanceOfUnderlying(address owner) override external returns (uint) {\\n        FixedMath.Exp exchangeRate = FixedMath.Exp.wrap(exchangeRateCurrent());\\n        return FixedMath.mul_ScalarTruncate(exchangeRate, accountTokens[owner]);\\n    }\\n\\n    /**\\n     * @notice Get a snapshot of the account's balances, and the cached exchange rate\\n     * @dev This is used by comptroller to more efficiently perform liquidity checks.\\n     * @param account Address of the account to snapshot\\n     * @return (possible error, token balance, borrow balance, exchange rate mantissa)\\n     */\\n    function getAccountSnapshot(address account) override external view returns (uint, uint, uint, uint) {\\n        return (\\n            NO_ERROR,\\n            accountTokens[account],\\n            borrowBalanceStoredInternal(account),\\n            exchangeRateStoredInternal()\\n        );\\n    }\\n\\n    /**\\n     * @dev Function to simply retrieve block number\\n     *  This exists mainly for inheriting test contracts to stub this result.\\n     */\\n    function getBlockNumber() virtual internal view returns (uint) {\\n        return block.number;\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block borrow interest rate for this cToken\\n     * @return The borrow interest rate per block, scaled by 1e18\\n     */\\n    function borrowRatePerBlock() override external view returns (uint) {\\n        return interestRateModel.getBorrowRate(getCashPrior(), totalBorrows, totalReserves);\\n    }\\n\\n    /**\\n     * @notice Returns the current per-block supply interest rate for this cToken\\n     * @return The supply interest rate per block, scaled by 1e18\\n     */\\n    function supplyRatePerBlock() override external view returns (uint) {\\n        return interestRateModel.getSupplyRate(getCashPrior(), totalBorrows, totalReserves, reserveFactorMantissa);\\n    }\\n\\n    /**\\n     * @notice Returns the current total borrows plus accrued interest\\n     * @return The total borrows with interest\\n     */\\n    function totalBorrowsCurrent() override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        return totalBorrows;\\n    }\\n\\n    /**\\n     * @notice Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex\\n     * @param account The address whose balance should be calculated after updating borrowIndex\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceCurrent(address account) override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        return borrowBalanceStored(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return The calculated balance\\n     */\\n    function borrowBalanceStored(address account) override public view returns (uint) {\\n        return borrowBalanceStoredInternal(account);\\n    }\\n\\n    /**\\n     * @notice Return the borrow balance of account based on stored data\\n     * @param account The address whose balance should be calculated\\n     * @return (error code, the calculated balance or 0 if error code is non-zero)\\n     */\\n    function borrowBalanceStoredInternal(address account) internal view returns (uint) {\\n        /* Get borrowBalance and borrowIndex */\\n        BorrowSnapshot storage borrowSnapshot = accountBorrows[account];\\n\\n        /* If borrowBalance = 0 then borrowIndex is likely also 0.\\n         * Rather than failing the calculation with a division by 0, we immediately return 0 in this case.\\n         */\\n        if (borrowSnapshot.principal == 0) {\\n            return 0;\\n        }\\n\\n        /* Calculate new borrow balance using the interest index:\\n         *  recentBorrowBalance = borrower.borrowBalance * market.borrowIndex / borrower.borrowIndex\\n         */\\n        uint principalTimesIndex = borrowSnapshot.principal * borrowIndex;\\n        return principalTimesIndex / borrowSnapshot.interestIndex;\\n    }\\n\\n    /**\\n     * @notice Accrue interest then return the up-to-date exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateCurrent() override public nonReentrant returns (uint) {\\n        accrueInterest();\\n        return exchangeRateStored();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return Calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStored() override public view returns (uint) {\\n        return exchangeRateStoredInternal();\\n    }\\n\\n    /**\\n     * @notice Calculates the exchange rate from the underlying to the CToken\\n     * @dev This function does not accrue interest before calculating the exchange rate\\n     * @return calculated exchange rate scaled by 1e18\\n     */\\n    function exchangeRateStoredInternal() virtual internal view returns (uint) {\\n        uint _totalSupply = totalSupply;\\n        if (_totalSupply == 0) {\\n            /*\\n             * If there are no tokens minted:\\n             *  exchangeRate = initialExchangeRate\\n             */\\n            return initialExchangeRateMantissa;\\n        } else {\\n            /*\\n             * Otherwise:\\n             *  exchangeRate = (totalCash + totalBorrows - totalReserves) / totalSupply\\n             */\\n            uint totalCash = getCashPrior();\\n            uint cashPlusBorrowsMinusReserves = totalCash + totalBorrows - totalReserves;\\n            uint exchangeRate = cashPlusBorrowsMinusReserves * FixedMath.expScale / _totalSupply;\\n\\n            return exchangeRate;\\n        }\\n    }\\n\\n    /**\\n     * @notice Get cash balance of this cToken in the underlying asset\\n     * @return The quantity of underlying asset owned by this contract\\n     */\\n    function getCash() override external view returns (uint) {\\n        return getCashPrior();\\n    }\\n\\n    /**\\n     * @notice Applies accrued interest to total borrows and reserves\\n     * @dev This calculates interest accrued from the last checkpointed block\\n     *   up to the current block and writes new checkpoint to storage.\\n     */\\n    function accrueInterest() virtual override public returns (uint) {\\n        /* Remember the initial block number */\\n        uint currentBlockNumber = getBlockNumber();\\n        uint accrualBlockNumberPrior = accrualBlockNumber;\\n\\n        /* Short-circuit accumulating 0 interest */\\n        if (accrualBlockNumberPrior == currentBlockNumber) {\\n            return NO_ERROR;\\n        }\\n\\n        /* Read the previous values out of storage */\\n        uint cashPrior = getCashPrior();\\n        uint borrowsPrior = totalBorrows;\\n        uint reservesPrior = totalReserves;\\n        uint borrowIndexPrior = borrowIndex;\\n\\n        /* Calculate the current borrow interest rate */\\n        uint borrowRateMantissa = interestRateModel.getBorrowRate(cashPrior, borrowsPrior, reservesPrior);\\n        if (borrowRateMantissa > borrowRateMaxMantissa) revert BorrowRateTooHigh();\\n\\n        /* Calculate the number of blocks elapsed since the last accrual */\\n        uint blockDelta = currentBlockNumber - accrualBlockNumberPrior;\\n        accrualBlockNumber = currentBlockNumber;\\n\\n        /*\\n         * Calculate the interest accumulated into borrows and reserves and the new index:\\n         *  simpleInterestFactor = borrowRate * blockDelta\\n         *  interestAccumulated = simpleInterestFactor * totalBorrows\\n         *  totalBorrows = interestAccumulated + totalBorrows\\n         *  totalReserves = interestAccumulated * reserveFactor + totalReserves\\n         *  borrowIndex = simpleInterestFactor * borrowIndex + borrowIndex\\n         */\\n\\n        FixedMath.Exp simpleInterestFactor = FixedMath.mul_(FixedMath.Exp.wrap(borrowRateMantissa), blockDelta);\\n        uint interestAccumulated = FixedMath.mul_ScalarTruncate(simpleInterestFactor, borrowsPrior);\\n        totalBorrows = interestAccumulated + borrowsPrior;\\n        totalReserves = FixedMath.mul_ScalarTruncateAddUInt(FixedMath.Exp.wrap(reserveFactorMantissa), interestAccumulated, reservesPrior);\\n        borrowIndex = FixedMath.mul_ScalarTruncateAddUInt(simpleInterestFactor, borrowIndexPrior, borrowIndexPrior);\\n\\n        /* We emit an AccrueInterest event */\\n        emit AccrueInterest(cashPrior, interestAccumulated, borrowIndex, totalBorrows);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintInternal(uint mintAmount) internal nonReentrant {\\n        accrueInterest();\\n        // mintFresh emits the actual Mint event if successful and logs on errors, so we don't need to\\n        mintFresh(msg.sender, mintAmount);\\n    }\\n\\n    /**\\n     * @notice User supplies assets into the market and receives cTokens in exchange\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param minter The address of the account which is supplying the assets\\n     * @param mintAmount The amount of the underlying asset to supply\\n     */\\n    function mintFresh(address minter, uint mintAmount) internal {\\n        /* Fail if mint not allowed */\\n        uint allowed = comptroller.mintAllowed(address(this), minter, mintAmount);\\n        if (allowed != 0) {\\n            revert MintComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert MintFreshnessCheck();\\n        }\\n\\n        FixedMath.Exp exchangeRate = FixedMath.Exp.wrap(exchangeRateStoredInternal());\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         *  We call `doTransferIn` for the minter and the mintAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  `doTransferIn` reverts if anything goes wrong, since we can't be sure if\\n         *  side-effects occurred. The function returns the amount actually transferred,\\n         *  in case of a fee. On success, the cToken holds an additional `actualMintAmount`\\n         *  of cash.\\n         */\\n        uint actualMintAmount = doTransferIn(minter, mintAmount);\\n\\n        /*\\n         * We get the current exchange rate and calculate the number of cTokens to be minted:\\n         *  mintTokens = actualMintAmount / exchangeRate\\n         */\\n\\n        uint mintTokens = FixedMath.div_(actualMintAmount, exchangeRate);\\n\\n        /*\\n         * We calculate the new total supply of cTokens and minter token balance, checking for overflow:\\n         *  totalSupplyNew = totalSupply + mintTokens\\n         *  accountTokensNew = accountTokens[minter] + mintTokens\\n         * And write them into storage\\n         */\\n        totalSupply = totalSupply + mintTokens;\\n        accountTokens[minter] = accountTokens[minter] + mintTokens;\\n\\n        /* We emit a Mint event, and a Transfer event */\\n        emit Mint(minter, actualMintAmount, mintTokens);\\n        emit Transfer(address(this), minter, mintTokens);\\n\\n        /* We call the defense hook */\\n        // unused function\\n        // comptroller.mintVerify(address(this), minter, actualMintAmount, mintTokens);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     */\\n    function redeemInternal(uint redeemTokens) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), redeemTokens, 0);\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to receive from redeeming cTokens\\n     */\\n    function redeemUnderlyingInternal(uint redeemAmount) internal nonReentrant {\\n        accrueInterest();\\n        // redeemFresh emits redeem-specific logs on errors, so we don't need to\\n        redeemFresh(payable(msg.sender), 0, redeemAmount);\\n    }\\n\\n    /**\\n     * @notice User redeems cTokens in exchange for the underlying asset\\n     * @dev Assumes interest has already been accrued up to the current block\\n     * @param redeemer The address of the account which is redeeming the tokens\\n     * @param redeemTokensIn The number of cTokens to redeem into underlying (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     * @param redeemAmountIn The number of underlying tokens to receive from redeeming cTokens (only one of redeemTokensIn or redeemAmountIn may be non-zero)\\n     */\\n    function redeemFresh(address payable redeemer, uint redeemTokensIn, uint redeemAmountIn) internal {\\n        if (redeemTokensIn != 0 && redeemAmountIn != 0) revert RedeemTokensInOrRedeemAmountInShouldBeZero();\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        FixedMath.Exp exchangeRate = FixedMath.Exp.wrap(exchangeRateStoredInternal());\\n\\n        uint redeemTokens;\\n        uint redeemAmount;\\n        /* If redeemTokensIn > 0: */\\n        if (redeemTokensIn > 0) {\\n            /*\\n             * We calculate the exchange rate and the amount of underlying to be redeemed:\\n             *  redeemTokens = redeemTokensIn\\n             *  redeemAmount = redeemTokensIn x exchangeRateCurrent\\n             */\\n            redeemTokens = redeemTokensIn;\\n            redeemAmount = FixedMath.mul_ScalarTruncate(exchangeRate, redeemTokensIn);\\n        } else {\\n            /*\\n             * We get the current exchange rate and calculate the amount to be redeemed:\\n             *  redeemTokens = redeemAmountIn / exchangeRate\\n             *  redeemAmount = redeemAmountIn\\n             */\\n            redeemTokens = FixedMath.div_(redeemAmountIn, exchangeRate);\\n            redeemAmount = redeemAmountIn;\\n        }\\n\\n        /* Fail if redeem not allowed */\\n        uint allowed = comptroller.redeemAllowed(address(this), redeemer, redeemTokens);\\n        if (allowed != 0) {\\n            revert RedeemComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RedeemFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient cash */\\n        if (getCashPrior() < redeemAmount) {\\n            revert RedeemTransferOutNotPossible();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing reduced supply before external transfer.\\n         */\\n        totalSupply = totalSupply - redeemTokens;\\n        accountTokens[redeemer] = accountTokens[redeemer] - redeemTokens;\\n\\n        /*\\n         * We invoke doTransferOut for the redeemer and the redeemAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken has redeemAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(redeemer, redeemAmount);\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(redeemer, address(this), redeemTokens);\\n        emit Redeem(redeemer, redeemAmount, redeemTokens);\\n\\n        /* We call the defense hook */\\n        comptroller.redeemVerify(address(this), redeemer, redeemAmount, redeemTokens);\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      */\\n    function borrowInternal(uint borrowAmount) internal nonReentrant {\\n        accrueInterest();\\n        // borrowFresh emits borrow-specific logs on errors, so we don't need to\\n        borrowFresh(payable(msg.sender), borrowAmount);\\n    }\\n\\n    /**\\n      * @notice Users borrow assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      */\\n    function borrowFresh(address payable borrower, uint borrowAmount) internal {\\n        /* Fail if borrow not allowed */\\n        uint allowed = comptroller.borrowAllowed(address(this), borrower, borrowAmount);\\n        if (allowed != 0) {\\n            revert BorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert BorrowFreshnessCheck();\\n        }\\n\\n        /* Fail gracefully if protocol has insufficient underlying cash */\\n        if (getCashPrior() < borrowAmount) {\\n            revert BorrowCashNotAvailable();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on overflow:\\n         *  accountBorrowNew = accountBorrow + borrowAmount\\n         *  totalBorrowsNew = totalBorrows + borrowAmount\\n         */\\n        uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n        uint accountBorrowsNew = accountBorrowsPrev + borrowAmount;\\n        uint totalBorrowsNew = totalBorrows + borrowAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We write the previously calculated values into storage.\\n         *  Note: Avoid token reentrancy attacks by writing increased borrow before external transfer.\\n        `*/\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /*\\n         * We invoke doTransferOut for the borrower and the borrowAmount.\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken borrowAmount less of cash.\\n         *  doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         */\\n        doTransferOut(borrower, borrowAmount);\\n\\n        /* We emit a Borrow event */\\n        emit Borrow(borrower, borrowAmount, accountBorrowsNew, totalBorrowsNew);\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowInternal(uint repayAmount) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, msg.sender, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount The amount to repay, or -1 for the full outstanding amount\\n     */\\n    function repayBorrowBehalfInternal(address borrower, uint repayAmount) internal nonReentrant {\\n        accrueInterest();\\n        // repayBorrowFresh emits repay-borrow-specific logs on errors, so we don't need to\\n        repayBorrowFresh(msg.sender, borrower, repayAmount);\\n    }\\n\\n    /**\\n     * @notice Borrows are repaid by another user (possibly the borrower).\\n     * @param payer the account paying off the borrow\\n     * @param borrower the account with the debt being payed off\\n     * @param repayAmount the amount of underlying tokens being returned, or -1 for the full outstanding amount\\n     * @return (uint) the actual repayment amount.\\n     */\\n    function repayBorrowFresh(address payer, address borrower, uint repayAmount) internal returns (uint) {\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), payer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            revert RepayBorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RepayBorrowFreshnessCheck();\\n        }\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        uint repayAmountFinal = repayAmount == type(uint).max ? accountBorrowsPrev : repayAmount;\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /*\\n         * We call doTransferIn for the payer and the repayAmount\\n         *  Note: The cToken must handle variations between ERC-20 and ETH underlying.\\n         *  On success, the cToken holds an additional repayAmount of cash.\\n         *  doTransferIn reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n         *   it returns the amount actually transferred, in case of a fee.\\n         */\\n        uint actualRepayAmount = doTransferIn(payer, repayAmountFinal);\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        uint accountBorrowsNew = accountBorrowsPrev - actualRepayAmount;\\n        uint totalBorrowsNew = totalBorrows - actualRepayAmount;\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(payer, borrower, actualRepayAmount, accountBorrowsNew, totalBorrowsNew);\\n\\n        return actualRepayAmount;\\n    }\\n\\n    function repayWithDeposit(address borrower, uint repayAmount) external {\\n        accrueInterest();\\n        address repayer = msg.sender;\\n        /* Fail if repayBorrow not allowed */\\n        uint allowed = comptroller.repayBorrowAllowed(address(this), repayer, borrower, repayAmount);\\n        if (allowed != 0) {\\n            revert RepayBorrowComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert RepayBorrowFreshnessCheck();\\n        }\\n\\n        /* We fetch the amount the borrower owes, with accumulated interest */\\n        uint accountBorrowsPrev = borrowBalanceStoredInternal(borrower);\\n\\n        /* If repayAmount == -1, repayAmount = accountBorrows */\\n        uint repayAmountFinal = repayAmount == type(uint).max ? accountBorrowsPrev : repayAmount;\\n\\n        /* exchangeRate = invoke Exchange Rate Stored() */\\n        FixedMath.Exp exchangeRate = FixedMath.Exp.wrap(exchangeRateStoredInternal());\\n\\n        uint redeemTokens = FixedMath.div_(repayAmountFinal, exchangeRate);\\n\\n        if (repayer != borrower) {\\n            allowed = comptroller.redeemAllowed(address(this), repayer, redeemTokens);\\n            if (allowed != 0) {\\n                revert RedeemComptrollerRejection(allowed);\\n            }\\n        }\\n       \\n        totalSupply = totalSupply - redeemTokens;\\n        accountTokens[repayer] = accountTokens[repayer] - redeemTokens;\\n\\n        /*\\n         * We calculate the new borrower and total borrow balances, failing on underflow:\\n         *  accountBorrowsNew = accountBorrows - actualRepayAmount\\n         *  totalBorrowsNew = totalBorrows - actualRepayAmount\\n         */\\n        uint accountBorrowsNew = accountBorrowsPrev - repayAmountFinal;\\n        uint totalBorrowsNew = totalBorrows - repayAmountFinal;\\n\\n        /* We write the previously calculated values into storage */\\n        accountBorrows[borrower].principal = accountBorrowsNew;\\n        accountBorrows[borrower].interestIndex = borrowIndex;\\n        totalBorrows = totalBorrowsNew;\\n\\n        /* We emit a Transfer event, and a Redeem event */\\n        emit Transfer(repayer, address(this), redeemTokens);        \\n        /* We emit a RepayBorrow event */\\n        emit RepayBorrow(repayer, borrower, repayAmountFinal, accountBorrowsNew, totalBorrowsNew);\\n\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowInternal(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal nonReentrant {\\n        accrueInterest();\\n\\n        uint error = cTokenCollateral.accrueInterest();\\n        if (error != NO_ERROR) {\\n            // accrueInterest emits logs on errors, but we still want to log the fact that an attempted liquidation failed\\n            revert LiquidateAccrueCollateralInterestFailed(error);\\n        }\\n\\n        // liquidateBorrowFresh emits borrow-specific logs on errors, so we don't need to\\n        liquidateBorrowFresh(msg.sender, borrower, repayAmount, cTokenCollateral);\\n    }\\n\\n    /**\\n     * @notice The liquidator liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param liquidator The address repaying the borrow and seizing collateral\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     * @param repayAmount The amount of the underlying borrowed asset to repay\\n     */\\n    function liquidateBorrowFresh(address liquidator, address borrower, uint repayAmount, CTokenInterface cTokenCollateral) internal {\\n        /* Fail if liquidate not allowed */\\n        uint allowed = comptroller.liquidateBorrowAllowed(address(this), address(cTokenCollateral), liquidator, borrower, repayAmount);\\n        if (allowed != 0) {\\n            revert LiquidateComptrollerRejection(allowed);\\n        }\\n\\n        /* Verify market's block number equals current block number */\\n        if (accrualBlockNumber != getBlockNumber()) {\\n            revert LiquidateFreshnessCheck();\\n        }\\n\\n        /* Verify cTokenCollateral market's block number equals current block number */\\n        if (cTokenCollateral.accrualBlockNumber() != getBlockNumber()) {\\n            revert LiquidateCollateralFreshnessCheck();\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateLiquidatorIsBorrower();\\n        }\\n\\n        /* Fail if repayAmount = 0 */\\n        if (repayAmount == 0) {\\n            revert LiquidateCloseAmountIsZero();\\n        }\\n\\n        /* Fail if repayAmount = -1 */\\n        if (repayAmount == type(uint).max) {\\n            revert LiquidateCloseAmountIsUintMax();\\n        }\\n\\n        /* Fail if repayBorrow fails */\\n        uint actualRepayAmount = repayBorrowFresh(liquidator, borrower, repayAmount);\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We calculate the number of collateral tokens that will be seized */\\n        (, uint seizeTokens) = comptroller.liquidateCalculateSeizeTokens(address(this), address(cTokenCollateral), actualRepayAmount);\\n\\n        if (comptroller.isValidSmartAccount(borrower)) {\\n            ISmartAccount smartBorrower = ISmartAccount(borrower);\\n            uint accountCollateralValue = smartBorrower.getNonStandardCollateralAssetValue();\\n            if (accountCollateralValue < seizeTokens) revert LiquidateSizeTooMuch();\\n            smartBorrower.liquidate(borrower, liquidator);\\n            return;\\n        }\\n        /* Revert if borrower collateral token balance < seizeTokens */\\n        if (cTokenCollateral.balanceOf(borrower) < seizeTokens) revert LiquidateSizeTooMuch();\\n\\n        // If this is also the collateral, run seizeInternal to avoid re-entrancy, otherwise make an external call\\n        if (address(cTokenCollateral) == address(this)) {\\n            seizeInternal(address(this), liquidator, borrower, seizeTokens);\\n        } else {\\n            cTokenCollateral.seize(liquidator, borrower, seizeTokens);\\n        }\\n\\n        /* We emit a LiquidateBorrow event */\\n        emit LiquidateBorrow(liquidator, borrower, actualRepayAmount, address(cTokenCollateral), seizeTokens);\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Will fail unless called by another cToken during the process of liquidation.\\n     *  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function seize(address liquidator, address borrower, uint seizeTokens) override external nonReentrant returns (uint) {\\n        seizeInternal(msg.sender, liquidator, borrower, seizeTokens);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Transfers collateral tokens (this market) to the liquidator.\\n     * @dev Called only during an in-kind liquidation, or by liquidateBorrow during the liquidation of another CToken.\\n     *  Its absolutely critical to use msg.sender as the seizer cToken and not a parameter.\\n     * @param seizerToken The contract seizing the collateral (i.e. borrowed cToken)\\n     * @param liquidator The account receiving seized collateral\\n     * @param borrower The account having collateral seized\\n     * @param seizeTokens The number of cTokens to seize\\n     */\\n    function seizeInternal(address seizerToken, address liquidator, address borrower, uint seizeTokens) internal {\\n        /* Fail if seize not allowed */\\n        uint allowed = comptroller.seizeAllowed(address(this), seizerToken, liquidator, borrower, seizeTokens);\\n        if (allowed != 0) {\\n            revert LiquidateSeizeComptrollerRejection(allowed);\\n        }\\n\\n        /* Fail if borrower = liquidator */\\n        if (borrower == liquidator) {\\n            revert LiquidateSeizeLiquidatorIsBorrower();\\n        }\\n\\n        /*\\n         * We calculate the new borrower and liquidator token balances, failing on underflow/overflow:\\n         *  borrowerTokensNew = accountTokens[borrower] - seizeTokens\\n         *  liquidatorTokensNew = accountTokens[liquidator] + seizeTokens\\n         */\\n        uint protocolSeizeTokens = FixedMath.mul_(seizeTokens, FixedMath.Exp.wrap(protocolSeizeShareMantissa));\\n        uint liquidatorSeizeTokens = seizeTokens - protocolSeizeTokens;\\n        FixedMath.Exp exchangeRate = FixedMath.Exp.wrap(exchangeRateStoredInternal());\\n        uint protocolSeizeAmount = FixedMath.mul_ScalarTruncate(exchangeRate, protocolSeizeTokens);\\n        uint totalReservesNew = totalReserves + protocolSeizeAmount;\\n\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        /* We write the calculated values into storage */\\n        totalReserves = totalReservesNew;\\n        totalSupply = totalSupply - protocolSeizeTokens;\\n        accountTokens[borrower] = accountTokens[borrower] - seizeTokens;\\n        accountTokens[liquidator] = accountTokens[liquidator] + liquidatorSeizeTokens;\\n\\n        /* Emit a Transfer event */\\n        emit Transfer(borrower, liquidator, liquidatorSeizeTokens);\\n        emit Transfer(borrower, address(this), protocolSeizeTokens);\\n        emit ReservesAdded(address(this), protocolSeizeAmount, totalReservesNew);\\n    }\\n\\n\\n    /*** Admin Functions ***/\\n\\n    /**\\n      * @notice Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @dev Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.\\n      * @param newPendingAdmin New pending admin.\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setPendingAdmin(address payable newPendingAdmin) override external returns (uint) {\\n        // Check caller = admin\\n        if (msg.sender != admin) {\\n            revert SetPendingAdminOwnerCheck();\\n        }\\n\\n        emit NewPendingAdmin(pendingAdmin, newPendingAdmin);\\n\\n        // Store pendingAdmin with value newPendingAdmin\\n        pendingAdmin = newPendingAdmin;\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice Accepts transfer of admin rights. msg.sender must be pendingAdmin\\n      * @dev Admin function for pending admin to accept role and update admin\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _acceptAdmin() override external returns (uint) {\\n        // Check caller is pendingAdmin and pendingAdmin \\u2260 address(0)\\n        if (msg.sender != pendingAdmin || pendingAdmin == address(0)) {\\n            revert AcceptAdminPendingAdminCheck();\\n        }\\n\\n        emit NewAdmin(admin, pendingAdmin);\\n        emit NewPendingAdmin(pendingAdmin, payable(address(0)));\\n     \\n        // Store admin with value pendingAdmin\\n        admin = pendingAdmin;\\n\\n        // Clear the pending value\\n        pendingAdmin = payable(address(0));\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice Sets a new comptroller for the market\\n      * @dev Admin function to set a new comptroller\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setComptroller(ComptrollerInterface newComptroller) override public returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetComptrollerOwnerCheck();\\n        }\\n\\n        // Ensure invoke comptroller.isComptroller() returns true\\n        if(!newComptroller.isComptroller()) revert NotComptroller();\\n\\n        emit NewComptroller(comptroller, newComptroller);\\n\\n        // Set market's comptroller to newComptroller\\n        comptroller = newComptroller;\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh\\n      * @dev Admin function to accrue interest and set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactor(uint newReserveFactorMantissa) override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _setReserveFactorFresh emits reserve-factor-specific logs on errors, so we don't need to.\\n        return _setReserveFactorFresh(newReserveFactorMantissa);\\n    }\\n\\n    /**\\n      * @notice Sets a new reserve factor for the protocol (*requires fresh interest accrual)\\n      * @dev Admin function to set a new reserve factor\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function _setReserveFactorFresh(uint newReserveFactorMantissa) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetReserveFactorAdminCheck();\\n        }\\n\\n        // Check newReserveFactor \\u2264 maxReserveFactor\\n        if (newReserveFactorMantissa > reserveFactorMaxMantissa) {\\n            revert SetReserveFactorBoundsCheck();\\n        }\\n\\n        emit NewReserveFactor(reserveFactorMantissa, newReserveFactorMantissa);\\n\\n        reserveFactorMantissa = newReserveFactorMantissa;\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Accrues interest and reduces reserves by transferring to admin\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReserves(uint reduceAmount) override external nonReentrant returns (uint) {\\n        accrueInterest();\\n        // _reduceReservesFresh emits reserve-reduction-specific logs on errors, so we don't need to.\\n        return _reduceReservesFresh(reduceAmount);\\n    }\\n\\n    /**\\n     * @notice Reduces reserves by transferring to admin\\n     * @dev Requires fresh interest accrual\\n     * @param reduceAmount Amount of reduction to reserves\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _reduceReservesFresh(uint reduceAmount) internal returns (uint) {\\n        // Fail gracefully if protocol has insufficient underlying cash\\n        if (getCashPrior() < reduceAmount) {\\n            revert ReduceReservesCashNotAvailable();\\n        }\\n\\n        // Check reduceAmount \\u2264 reserves[n] (totalReserves)\\n        if (reduceAmount > totalReserves) {\\n            revert ReduceReservesCashValidation();\\n        }\\n\\n        /////////////////////////\\n        // EFFECTS & INTERACTIONS\\n        // (No safe failures beyond this point)\\n\\n        totalReserves = totalReserves - reduceAmount;\\n\\n        // doTransferOut reverts if anything goes wrong, since we can't be sure if side effects occurred.\\n        doTransferOut(admin, reduceAmount);\\n\\n        emit ReservesReduced(admin, reduceAmount, totalReserves);\\n\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice accrues interest and updates the interest rate model using _setInterestRateModelFresh\\n     * @dev Admin function to accrue interest and update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) override public returns (uint) {\\n        accrueInterest();\\n        // _setInterestRateModelFresh emits interest-rate-model-update-specific logs on errors, so we don't need to.\\n        return _setInterestRateModelFresh(newInterestRateModel);\\n    }\\n\\n    /**\\n     * @notice updates the interest rate model (*requires fresh interest accrual)\\n     * @dev Admin function to update the interest rate model\\n     * @param newInterestRateModel the new interest rate model to use\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function _setInterestRateModelFresh(InterestRateModel newInterestRateModel) internal returns (uint) {\\n        // Check caller is admin\\n        if (msg.sender != admin) {\\n            revert SetInterestRateModelOwnerCheck();\\n        }\\n\\n        // Ensure invoke newInterestRateModel.isInterestRateModel() returns true\\n        if (!newInterestRateModel.isInterestRateModel()) revert InvalidContractAddress();\\n\\n        // Emit NewMarketInterestRateModel(oldInterestRateModel, newInterestRateModel)\\n        emit NewMarketInterestRateModel(interestRateModel, newInterestRateModel);\\n\\n        // Set the interest rate model to newInterestRateModel\\n        interestRateModel = newInterestRateModel;\\n   \\n        return NO_ERROR;\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying owned by this contract\\n     */\\n    function getCashPrior() virtual internal view returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer in, reverting upon failure. Returns the amount actually transferred to the protocol, in case of a fee.\\n     *  This may revert due to insufficient balance or insufficient allowance.\\n     */\\n    function doTransferIn(address from, uint amount) virtual internal returns (uint);\\n\\n    /**\\n     * @dev Performs a transfer out, ideally returning an explanatory error code upon failure rather than reverting.\\n     *  If caller has not called checked protocol's balance, may revert due to insufficient cash held in the contract.\\n     *  If caller has checked protocol's balance, and verified it is >= amount, this should not revert in normal conditions.\\n     */\\n    function doTransferOut(address payable to, uint amount) virtual internal;\\n\\n    function isNativeToken() external pure virtual returns (bool) {\\n        return false;\\n    }\\n    /*** Reentrancy Guard ***/\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     */\\n    modifier nonReentrant() {\\n        require(_notEntered, \\\"re-entered\\\");\\n        _notEntered = false;\\n        _;\\n        _notEntered = true; // get a gas-refund post-Istanbul\\n    }\\n}\\n\",\"keccak256\":\"0xbe60bfe841a031d8540508394d28767b744b35bcbae44ab0088c64fb81b86bf6\",\"license\":\"BSD-3-Clause\"},\"contracts/CWrappedNative.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CToken.sol\\\";\\nimport \\\"./Interfaces/IWETH.sol\\\";\\n\\n/**\\n * @title Compound's CErc20 Contract\\n * @notice CTokens which wrap an EIP-20 underlying\\n * @author Compound\\n */\\ncontract CWrappedNative is CToken, CErc20Storage {\\n    /**\\n     * @notice Initialize the new money market\\n     * @param underlying_ The address of the underlying asset\\n     * @param comptroller_ The address of the Comptroller\\n     * @param interestRateModel_ The address of the interest rate model\\n     * @param initialExchangeRateMantissa_ The initial exchange rate, scaled by 1e18\\n     * @param name_ ERC-20 name of this token\\n     * @param symbol_ ERC-20 symbol of this token\\n     * @param decimals_ ERC-20 decimal precision of this token\\n     */\\n    function initialize(address underlying_,\\n                        ComptrollerInterface comptroller_,\\n                        InterestRateModel interestRateModel_,\\n                        uint initialExchangeRateMantissa_,\\n                        string memory name_,\\n                        string memory symbol_,\\n                        uint8 decimals_) public {\\n        // CToken initialize does the bulk of the work\\n        super.initialize(comptroller_, interestRateModel_, initialExchangeRateMantissa_, name_, symbol_, decimals_);\\n\\n        // Set underlying and sanity check it\\n        underlying = underlying_;\\n        EIP20Interface(underlying).totalSupply();\\n        IWETH(underlying);\\n    }\\n\\n    /*** User Interface ***/\\n\\n    /**\\n     * @notice Sender supplies assets into the market and receives cTokens in exchange\\n     * @dev Reverts upon any failure\\n     */\\n    function mint() external payable {\\n        mintInternal(msg.value);\\n    }\\n    /**\\n     * @notice Sender redeems cTokens in exchange for the underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemTokens The number of cTokens to redeem into underlying\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeem(uint redeemTokens) external returns (uint) {\\n        redeemInternal(redeemTokens);\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sender redeems cTokens in exchange for a specified amount of underlying asset\\n     * @dev Accrues interest whether or not the operation succeeds, unless reverted\\n     * @param redeemAmount The amount of underlying to redeem\\n     * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n     */\\n    function redeemUnderlying(uint redeemAmount) external returns (uint) {\\n        redeemUnderlyingInternal(redeemAmount);\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n      * @notice Sender borrows assets from the protocol to their own address\\n      * @param borrowAmount The amount of the underlying asset to borrow\\n      * @return uint 0=success, otherwise a failure (see ErrorReporter.sol for details)\\n      */\\n    function borrow(uint borrowAmount) external returns (uint) {\\n        borrowInternal(borrowAmount);\\n        return NO_ERROR;\\n    }\\n\\n    /**\\n     * @notice Sender repays their own borrow\\n     */\\n    function repayBorrow() external payable {\\n        repayBorrowInternal(msg.value);\\n    }\\n\\n    /**\\n     * @notice Sender repays a borrow belonging to borrower\\n     * @param borrower the account with the debt being payed off\\n     */\\n    function repayBorrowBehalf(address borrower) external payable {\\n        repayBorrowBehalfInternal(borrower, msg.value);\\n    }\\n\\n    /**\\n     * @notice The sender liquidates the borrowers collateral.\\n     *  The collateral seized is transferred to the liquidator.\\n     * @dev Reverts upon any failure\\n     * @param borrower The borrower of this cToken to be liquidated\\n     * @param cTokenCollateral The market in which to seize collateral from the borrower\\n     */\\n    function liquidateBorrow(address borrower, CToken cTokenCollateral) external payable {\\n        liquidateBorrowInternal(borrower, msg.value, cTokenCollateral);\\n    }\\n\\n    /*** Safe Token ***/\\n\\n    /**\\n     * @notice Gets balance of this contract in terms of the underlying\\n     * @dev This excludes the value of the current message, if any\\n     * @return The quantity of underlying tokens owned by this contract\\n     */\\n    function getCashPrior() internal view override returns (uint) {\\n        EIP20Interface token = EIP20Interface(underlying);\\n        return token.balanceOf(address(this));\\n    }\\n\\n    /**\\n     * @notice Perform the actual transfer in, which is a no-op\\n     * @param from Address sending the Ether\\n     * @param amount Amount of Ether being sent\\n     * @return The actual amount of Ether transferred\\n     */\\n    function doTransferIn(address from, uint amount) internal override returns (uint) {\\n        // Sanity checks\\n        require(msg.sender == from, \\\"sender mismatch\\\");\\n        require(msg.value == amount, \\\"value mismatch\\\");\\n        IWETH nativeWrapper = IWETH(underlying);\\n        nativeWrapper.deposit{value: amount}();\\n        return amount;\\n    }\\n\\n    function doTransferOut(address payable to, uint amount) internal override {\\n        /* Send the Ether, with minimal gas and revert on failure */\\n        IWETH nativeWrapper = IWETH(underlying);\\n        nativeWrapper.withdraw(amount);\\n        to.transfer(amount);\\n    }\\n\\n    function doFlashLoanTransferOut(address payable receiver, address wrapperToken, uint amount) internal {\\n        require(wrapperToken == underlying, \\\"!token\\\");\\n\\n        IWETH nativeWrapper = IWETH(underlying);\\n        nativeWrapper.transfer(receiver, amount);\\n    }\\n\\n    function doFlashLoanTransferIn(address receiver, address wrapperToken, uint amount) internal {\\n        require(wrapperToken == underlying, \\\"!token\\\");\\n        IWETH nativeWrapper = IWETH(underlying);\\n        uint balanceBefore = nativeWrapper.balanceOf(address(this));\\n\\n        nativeWrapper.transferFrom(receiver, address(this), amount);\\n\\n        uint balanceAfter = nativeWrapper.balanceOf(address(this));\\n        require(balanceAfter >= balanceBefore, \\\"TRANSFER_IN_OVERFLOW\\\");\\n        require(balanceAfter - balanceBefore == amount, \\\"!amount\\\");\\n    }\\n\\n    function isNativeToken() external pure override returns (bool) {\\n        return true;\\n    }\\n\\n    function validateFlashloanToken(address token) view internal {\\n        require(underlying == token, \\\"!flashloan token\\\");\\n    }\\n\\n    receive() external payable {\\n        require(msg.sender == underlying, \\\"!wrapped native\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x2872f6c006b3c7d6b6458a25e79a7a39449b40fad888094841055a6006155152\",\"license\":\"BSD-3-Clause\"},\"contracts/CWrappedNativeDelegate.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./CWrappedNative.sol\\\";\\n\\n/**\\n * @title Compound's CErc20Delegate Contract\\n * @notice CTokens which wrap an EIP-20 underlying and are delegated to\\n * @author Compound\\n */\\ncontract CWrappedNativeDelegate is CWrappedNative, CDelegateInterface {\\n    /**\\n     * @notice Construct an empty delegate\\n     */\\n    constructor() {}\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) public override {\\n        // Shh -- currently unused\\n        data;\\n\\n        // Shh -- we don't ever want this hook to be marked pure\\n        if (false) {\\n            implementation = address(0);\\n        }\\n\\n        require(msg.sender == admin, \\\"only the admin may call _becomeImplementation\\\");\\n        \\n        uint256 balance = address(this).balance;\\n        if (balance > 0) {\\n            IWETH(underlying).deposit{value: balance}();\\n        }\\n    }\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() public override {\\n        // Shh -- we don't ever want this hook to be marked pure\\n        if (false) {\\n            implementation = address(0);\\n        }\\n\\n        require(msg.sender == admin, \\\"only the admin may call _resignImplementation\\\");\\n    }\\n}\\n\",\"keccak256\":\"0x24527a9af34a2339247f4f561e3e67496dd4d148e695b49c4dbea7c08c7a5fa9\",\"license\":\"BSD-3-Clause\"},\"contracts/ErrorReporter.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ncontract ComptrollerErrorReporter {\\n    error IllegalArgument();\\n    error PriceError();\\n    error Unauthorized();\\n    error MarketNotListed();\\n    error ExitMarketBalanceOwned();\\n    error MintPaused();\\n    error RedeemTokensZero();\\n    error BorrowPaused();\\n    error SenderNotCToken();\\n    error BorrowCapReached();\\n    error RepayTooMuch();\\n    error SeizePaused();\\n    error TransferPaused();\\n    error MarketAlreadyListed();\\n    error InvalidBlockNumber();\\n    error InvalidCollaternalFactor();\\n    error ExitMarketFailed(uint);\\n    enum Error {\\n        NO_ERROR,\\n        COMPTROLLER_MISMATCH,\\n        INSUFFICIENT_SHORTFALL,\\n        INSUFFICIENT_LIQUIDITY,\\n        MARKET_NOT_LISTED,\\n        PRICE_ERROR,\\n        TOO_MUCH_REPAY\\n    }\\n}\\n\\ncontract TokenErrorReporter {\\n    uint public constant NO_ERROR = 0; // support legacy return codes\\n\\n    error TransferComptrollerRejection(uint256 errorCode);\\n    error TransferNotAllowed();\\n    error TransferNotEnough();\\n    error TransferTooMuch();\\n\\n    error MintComptrollerRejection(uint256 errorCode);\\n    error MintFreshnessCheck();\\n\\n    error RedeemComptrollerRejection(uint256 errorCode);\\n    error RedeemFreshnessCheck();\\n    error RedeemTransferOutNotPossible();\\n\\n    error BorrowComptrollerRejection(uint256 errorCode);\\n    error BorrowFreshnessCheck();\\n    error BorrowCashNotAvailable();\\n\\n    error RepayBorrowComptrollerRejection(uint256 errorCode);\\n    error RepayBorrowFreshnessCheck();\\n\\n    error LiquidateComptrollerRejection(uint256 errorCode);\\n    error LiquidateFreshnessCheck();\\n    error LiquidateCollateralFreshnessCheck();\\n    error LiquidateAccrueBorrowInterestFailed(uint256 errorCode);\\n    error LiquidateAccrueCollateralInterestFailed(uint256 errorCode);\\n    error LiquidateLiquidatorIsBorrower();\\n    error LiquidateCloseAmountIsZero();\\n    error LiquidateCloseAmountIsUintMax();\\n    error LiquidateRepayBorrowFreshFailed(uint256 errorCode);\\n\\n    error LiquidateSeizeComptrollerRejection(uint256 errorCode);\\n    error LiquidateSeizeLiquidatorIsBorrower();\\n\\n    error AcceptAdminPendingAdminCheck();\\n\\n    error SetComptrollerOwnerCheck();\\n    error SetPendingAdminOwnerCheck();\\n\\n    error SetReserveFactorAdminCheck();\\n    error SetReserveFactorFreshCheck();\\n    error SetReserveFactorBoundsCheck();\\n\\n    error AddReservesFactorFreshCheck(uint256 actualAddAmount);\\n\\n    error ReduceReservesAdminCheck();\\n    error ReduceReservesFreshCheck();\\n    error ReduceReservesCashNotAvailable();\\n    error ReduceReservesCashValidation();\\n\\n    error SetInterestRateModelOwnerCheck();\\n    error SetInterestRateModelFreshCheck();\\n\\n    error InitialExchangeRateCannotBeZero();\\n    error MarketAlreadyInitialized();\\n    error Unauthorized();\\n    error BorrowRateTooHigh();\\n    error RedeemTokensInOrRedeemAmountInShouldBeZero();\\n    error LiquidateSizeTooMuch();\\n    error NotComptroller();\\n    error InvalidContractAddress();\\n}\\n\",\"keccak256\":\"0xfbc850718fef898d09e641a99c77baf578655301598bfa54be689dfe2f4cc313\",\"license\":\"BSD-3-Clause\"},\"contracts/FixedMath.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title Exponential module for storing fixed-precision decimals\\n * @author Compound\\n * @notice Exp is a struct which stores decimals with a fixed precision of 18 decimal places.\\n *         Thus, if we wanted to store the 5.1, mantissa would store 5.1e18. That is:\\n *         `Exp({mantissa: 5100000000000000000})`.\\n */\\nlibrary FixedMath {\\n    error InvalidNumber(uint);\\n    uint constant expScale = 1e18;\\n    uint constant doubleScale = 1e36;\\n    uint constant halfExpScale = expScale/2;\\n    uint constant mantissaOne = expScale;\\n\\n    type Exp is uint;\\n \\n    type Double is uint;\\n\\n    /**\\n     * @dev Truncates the given exp to a whole number value.\\n     *      For example, truncate(Exp{mantissa: 15 * expScale}) = 15\\n     */\\n    function truncate(Exp exp) pure internal returns (uint) {\\n        // Note: We are not using careful math here as we're performing a division that cannot fail\\n        return Exp.unwrap(exp) / expScale;\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, then truncate to return an unsigned integer.\\n     */\\n    function mul_ScalarTruncate(Exp a, uint scalar) pure internal returns (uint) {\\n        Exp product = mul_(a, scalar);\\n        return truncate(product);\\n    }\\n\\n    /**\\n     * @dev Multiply an Exp by a scalar, truncate, then add an to an unsigned integer, returning an unsigned integer.\\n     */\\n    function mul_ScalarTruncateAddUInt(Exp a, uint scalar, uint addend) pure internal returns (uint) {\\n        Exp product = mul_(a, scalar);\\n        return add_(truncate(product), addend);\\n    }\\n\\n    /**\\n     * @dev Checks if first Exp is less than second Exp.\\n     */\\n    function lessThanExp(Exp left, Exp right) pure internal returns (bool) {\\n        return Exp.unwrap(left) < Exp.unwrap(right);\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp <= right Exp.\\n     */\\n    function lessThanOrEqualExp(Exp left, Exp right) pure internal returns (bool) {\\n        return Exp.unwrap(left) <= Exp.unwrap(right);\\n    }\\n\\n    /**\\n     * @dev Checks if left Exp > right Exp.\\n     */\\n    function greaterThanExp(Exp left, Exp right) pure internal returns (bool) {\\n        return Exp.unwrap(left) > Exp.unwrap(right);\\n    }\\n\\n    /**\\n     * @dev returns true if Exp is exactly zero\\n     */\\n    function isZeroExp(Exp value) pure internal returns (bool) {\\n        return Exp.unwrap(value) == 0;\\n    }\\n\\n    function safe224(uint n) pure internal returns (uint224) {\\n        if (n >= 2**224) revert InvalidNumber(n);\\n        return uint224(n);\\n    }\\n\\n    function safe32(uint n) pure internal returns (uint32) {\\n        if (n >= 2**32) revert InvalidNumber(n);\\n        return uint32(n);\\n    }\\n\\n    function add_(Exp a, Exp b) pure internal returns (Exp) {\\n        return Exp.wrap(add_(Exp.unwrap(a), Exp.unwrap(b)));\\n    }\\n\\n    function add_(Double a, Double b) pure internal returns (Double) {\\n        return Double.wrap(add_(Double.unwrap(a), Double.unwrap(b)));\\n    }\\n\\n    function add_(uint a, uint b) pure internal returns (uint) {\\n        return a + b;\\n    }\\n\\n    function sub_(Exp a, Exp b) pure internal returns (Exp) {\\n        return Exp.wrap(sub_(Exp.unwrap(a), Exp.unwrap(b)));\\n    }\\n\\n    function sub_(Double a, Double b) pure internal returns (Double) {\\n        return Double.wrap(sub_(Double.unwrap(a), Double.unwrap(b)));\\n    }\\n\\n    function sub_(uint a, uint b) pure internal returns (uint) {\\n        return a - b;\\n    }\\n\\n    function mul_(Exp a, Exp b) pure internal returns (Exp) {\\n        return Exp.wrap(mul_(Exp.unwrap(a), Exp.unwrap(b)) / expScale);\\n    }\\n\\n    function mul_(Exp a, uint b) pure internal returns (Exp) {\\n        return Exp.wrap(mul_(Exp.unwrap(a), b));\\n    }\\n\\n    function mul_(uint a, Exp b) pure internal returns (uint) {\\n        return mul_(a, Exp.unwrap(b)) / expScale;\\n    }\\n\\n    function mul_(Double a, Double b) pure internal returns (Double) {\\n        return Double.wrap(mul_(Double.unwrap(a), Double.unwrap(b)) / doubleScale);\\n    }\\n\\n    function mul_(Double a, uint b) pure internal returns (Double) {\\n        return Double.wrap(mul_(Double.unwrap(a), b));\\n    }\\n\\n    function mul_(uint a, Double b) pure internal returns (uint) {\\n        return mul_(a, Double.unwrap(b)) / doubleScale;\\n    }\\n\\n    function mul_(uint a, uint b) pure internal returns (uint) {\\n        return a * b;\\n    }\\n\\n    function div_(Exp a, Exp b) pure internal returns (Exp) {\\n        return Exp.wrap(div_(mul_(Exp.unwrap(a), expScale), Exp.unwrap(b)));\\n    }\\n\\n    function div_(Exp a, uint b) pure internal returns (Exp) {\\n        return Exp.wrap(div_(Exp.unwrap(a), b));\\n    }\\n\\n    function div_(uint a, Exp b) pure internal returns (uint) {\\n        return div_(mul_(a, expScale), Exp.unwrap(b));\\n    }\\n\\n    function div_(Double a, Double b) pure internal returns (Double) {\\n        return Double.wrap(div_(mul_(Double.unwrap(a), doubleScale), Double.unwrap(b)));\\n    }\\n\\n    function div_(Double a, uint b) pure internal returns (Double) {\\n        return Double.wrap(div_(Double.unwrap(a), b));\\n    }\\n\\n    function div_(uint a, Double b) pure internal returns (uint) {\\n        return div_(mul_(a, doubleScale), Double.unwrap(b));\\n    }\\n\\n    function div_(uint a, uint b) pure internal returns (uint) {\\n        return a / b;\\n    }\\n\\n    function fraction(uint a, uint b) pure internal returns (Double) {\\n        return Double.wrap(div_(mul_(a, doubleScale), b));\\n    }\\n}\\n\",\"keccak256\":\"0x32811f1bc930d91c1b914110f808d87056a149dd89a84f4485355e3a8b7b72f1\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/CTokenInterfaces.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ComptrollerInterface.sol\\\";\\nimport \\\"./InterestRateModel.sol\\\";\\nimport \\\"./EIP20NonStandardInterface.sol\\\";\\nimport \\\"../ErrorReporter.sol\\\";\\n\\ncontract CTokenStorage {\\n    /**\\n     * @dev Guard variable for re-entrancy checks\\n     */\\n    bool internal _notEntered;\\n\\n    /**\\n     * @notice EIP-20 token name for this token\\n     */\\n    string public name;\\n\\n    /**\\n     * @notice EIP-20 token symbol for this token\\n     */\\n    string public symbol;\\n\\n    /**\\n     * @notice EIP-20 token decimals for this token\\n     */\\n    uint8 public decimals;\\n\\n    // Maximum borrow rate that can ever be applied (.0005% / block)\\n    uint internal constant borrowRateMaxMantissa = 0.0005e16;\\n\\n    // Maximum fraction of interest that can be set aside for reserves\\n    uint internal constant reserveFactorMaxMantissa = 1e18;\\n\\n    /**\\n     * @notice Administrator for this contract\\n     */\\n    address payable public admin;\\n\\n    /**\\n     * @notice Pending administrator for this contract\\n     */\\n    address payable public pendingAdmin;\\n\\n    /**\\n     * @notice Contract which oversees inter-cToken operations\\n     */\\n    ComptrollerInterface public comptroller;\\n\\n    /**\\n     * @notice Model which tells what the current interest rate should be\\n     */\\n    InterestRateModel public interestRateModel;\\n\\n    // Initial exchange rate used when minting the first CTokens (used when totalSupply = 0)\\n    uint internal initialExchangeRateMantissa;\\n\\n    /**\\n     * @notice Fraction of interest currently set aside for reserves\\n     */\\n    uint public reserveFactorMantissa;\\n\\n    /**\\n     * @notice Block number that interest was last accrued at\\n     */\\n    uint public accrualBlockNumber;\\n\\n    /**\\n     * @notice Accumulator of the total earned interest rate since the opening of the market\\n     */\\n    uint public borrowIndex;\\n\\n    /**\\n     * @notice Total amount of outstanding borrows of the underlying in this market\\n     */\\n    uint public totalBorrows;\\n\\n    /**\\n     * @notice Total amount of reserves of the underlying held in this market\\n     */\\n    uint public totalReserves;\\n\\n    /**\\n     * @notice Total number of tokens in circulation\\n     */\\n    uint public totalSupply;\\n\\n    // Official record of token balances for each account\\n    mapping (address => uint) internal accountTokens;\\n\\n    // Approved token transfer amounts on behalf of others\\n    mapping (address => mapping (address => uint)) internal transferAllowances;\\n\\n    /**\\n     * @notice Container for borrow balance information\\n     * @member principal Total balance (with accrued interest), after applying the most recent balance-changing action\\n     * @member interestIndex Global borrowIndex as of the most recent balance-changing action\\n     */\\n    struct BorrowSnapshot {\\n        uint principal;\\n        uint interestIndex;\\n    }\\n\\n    // Mapping of account addresses to outstanding borrow balances\\n    mapping(address => BorrowSnapshot) internal accountBorrows;\\n\\n    /**\\n     * @notice Share of seized collateral that is added to reserves\\n     */\\n    uint public constant protocolSeizeShareMantissa = 2.8e16; //2.8%\\n}\\n\\nabstract contract CTokenInterface is CTokenStorage {\\n    /**\\n     * @notice Indicator that this is a CToken contract (for inspection)\\n     */\\n    bool public constant isCToken = true;\\n\\n\\n    /*** Market Events ***/\\n\\n    /**\\n     * @notice Event emitted when interest is accrued\\n     */\\n    event AccrueInterest(uint cashPrior, uint interestAccumulated, uint borrowIndex, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when tokens are minted\\n     */\\n    event Mint(address minter, uint mintAmount, uint mintTokens);\\n\\n    /**\\n     * @notice Event emitted when tokens are redeemed\\n     */\\n    event Redeem(address redeemer, uint redeemAmount, uint redeemTokens);\\n\\n    /**\\n     * @notice Event emitted when underlying is borrowed\\n     */\\n    event Borrow(address borrower, uint borrowAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is repaid\\n     */\\n    event RepayBorrow(address payer, address borrower, uint repayAmount, uint accountBorrows, uint totalBorrows);\\n\\n    /**\\n     * @notice Event emitted when a borrow is liquidated\\n     */\\n    event LiquidateBorrow(address liquidator, address borrower, uint repayAmount, address cTokenCollateral, uint seizeTokens);\\n\\n\\n    /*** Admin Events ***/\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is changed\\n     */\\n    event NewPendingAdmin(address oldPendingAdmin, address newPendingAdmin);\\n\\n    /**\\n     * @notice Event emitted when pendingAdmin is accepted, which means admin is updated\\n     */\\n    event NewAdmin(address oldAdmin, address newAdmin);\\n\\n    /**\\n     * @notice Event emitted when comptroller is changed\\n     */\\n    event NewComptroller(ComptrollerInterface oldComptroller, ComptrollerInterface newComptroller);\\n\\n    /**\\n     * @notice Event emitted when interestRateModel is changed\\n     */\\n    event NewMarketInterestRateModel(InterestRateModel oldInterestRateModel, InterestRateModel newInterestRateModel);\\n\\n    /**\\n     * @notice Event emitted when the reserve factor is changed\\n     */\\n    event NewReserveFactor(uint oldReserveFactorMantissa, uint newReserveFactorMantissa);\\n\\n    /**\\n     * @notice Event emitted when the reserves are added\\n     */\\n    event ReservesAdded(address benefactor, uint addAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice Event emitted when the reserves are reduced\\n     */\\n    event ReservesReduced(address admin, uint reduceAmount, uint newTotalReserves);\\n\\n    /**\\n     * @notice EIP20 Transfer event\\n     */\\n    event Transfer(address indexed from, address indexed to, uint amount);\\n\\n    /**\\n     * @notice EIP20 Approval event\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint amount);\\n\\n\\n    /*** User Interface ***/\\n\\n    function transfer(address dst, uint amount) virtual external returns (bool);\\n    function transferFrom(address src, address dst, uint amount) virtual external returns (bool);\\n    function approve(address spender, uint amount) virtual external returns (bool);\\n    function allowance(address owner, address spender) virtual external view returns (uint);\\n    function balanceOf(address owner) virtual external view returns (uint);\\n    function balanceOfUnderlying(address owner) virtual external returns (uint);\\n    function getAccountSnapshot(address account) virtual external view returns (uint, uint, uint, uint);\\n    function borrowRatePerBlock() virtual external view returns (uint);\\n    function supplyRatePerBlock() virtual external view returns (uint);\\n    function totalBorrowsCurrent() virtual external returns (uint);\\n    function borrowBalanceCurrent(address account) virtual external returns (uint);\\n    function borrowBalanceStored(address account) virtual external view returns (uint);\\n    function exchangeRateCurrent() virtual external returns (uint);\\n    function exchangeRateStored() virtual external view returns (uint);\\n    function getCash() virtual external view returns (uint);\\n    function accrueInterest() virtual external returns (uint);\\n    function seize(address liquidator, address borrower, uint seizeTokens) virtual external returns (uint);\\n\\n\\n    /*** Admin Functions ***/\\n\\n    function _setPendingAdmin(address payable newPendingAdmin) virtual external returns (uint);\\n    function _acceptAdmin() virtual external returns (uint);\\n    function _setComptroller(ComptrollerInterface newComptroller) virtual external returns (uint);\\n    function _setReserveFactor(uint newReserveFactorMantissa) virtual external returns (uint);\\n    function _reduceReserves(uint reduceAmount) virtual external returns (uint);\\n    function _setInterestRateModel(InterestRateModel newInterestRateModel) virtual external returns (uint);\\n}\\n\\ncontract CErc20Storage {\\n    /**\\n     * @notice Underlying asset for this CToken\\n     */\\n    address public underlying;\\n}\\n\\nabstract contract CErc20Interface is CErc20Storage {\\n\\n    /*** User Interface ***/\\n\\n    function mint(uint mintAmount) virtual external returns (uint);\\n    function redeem(uint redeemTokens) virtual external returns (uint);\\n    function redeemUnderlying(uint redeemAmount) virtual external returns (uint);\\n    function borrow(uint borrowAmount) virtual external returns (uint);\\n    function repayBorrow(uint repayAmount) virtual external returns (uint);\\n    function repayBorrowBehalf(address borrower, uint repayAmount) virtual external returns (uint);\\n    function liquidateBorrow(address borrower, uint repayAmount, CTokenInterface cTokenCollateral) virtual external returns (uint);\\n    function sweepToken(EIP20NonStandardInterface token) virtual external;\\n\\n\\n    /*** Admin Functions ***/\\n}\\n\\ncontract CDelegationStorage {\\n    /**\\n     * @notice Implementation address for this contract\\n     */\\n    address public implementation;\\n}\\n\\nabstract contract CDelegatorInterface is CDelegationStorage {\\n    /**\\n     * @notice Emitted when implementation is changed\\n     */\\n    event NewImplementation(address oldImplementation, address newImplementation);\\n\\n    /**\\n     * @notice Called by the admin to update the implementation of the delegator\\n     * @param implementation_ The address of the new implementation for delegation\\n     * @param allowResign Flag to indicate whether to call _resignImplementation on the old implementation\\n     * @param becomeImplementationData The encoded bytes data to be passed to _becomeImplementation\\n     */\\n    function _setImplementation(address implementation_, bool allowResign, bytes memory becomeImplementationData) virtual external;\\n}\\n\\nabstract contract CDelegateInterface is CDelegationStorage {\\n    /**\\n     * @notice Called by the delegator on a delegate to initialize it for duty\\n     * @dev Should revert if any issues arise which make it unfit for delegation\\n     * @param data The encoded bytes data for any initialization\\n     */\\n    function _becomeImplementation(bytes memory data) virtual external;\\n\\n    /**\\n     * @notice Called by the delegator on a delegate to forfeit its responsibility\\n     */\\n    function _resignImplementation() virtual external;\\n}\\n\",\"keccak256\":\"0x05345cbda4d417cd8f6567de777daaf4d404cd60e2619bcb894e8edabe836279\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/ComptrollerInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\nimport \\\"./ISmartAccountFactory.sol\\\";\\n\\nabstract contract ComptrollerInterface {\\n    /// @notice Indicator that this is a Comptroller contract (for inspection)\\n    bool public constant isComptroller = true;\\n\\n    /*** Assets You Are In ***/\\n\\n    function enterMarkets(address[] calldata cTokens) virtual external;\\n    function exitMarket(address cToken) virtual external;\\n\\n    /*** Policy Hooks ***/\\n\\n    function mintAllowed(address cToken, address minter, uint mintAmount) virtual external returns (uint);\\n\\n    function redeemAllowed(address cToken, address redeemer, uint redeemTokens) virtual external returns (uint);\\n    function redeemVerify(address cToken, address redeemer, uint redeemAmount, uint redeemTokens) virtual external;\\n\\n    function borrowAllowed(address cToken, address borrower, uint borrowAmount) virtual external returns (uint);\\n\\n    function repayBorrowAllowed(\\n        address cToken,\\n        address payer,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n\\n    function liquidateBorrowAllowed(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        address liquidator,\\n        address borrower,\\n        uint repayAmount) virtual external returns (uint);\\n\\n    function seizeAllowed(\\n        address cTokenCollateral,\\n        address cTokenBorrowed,\\n        address liquidator,\\n        address borrower,\\n        uint seizeTokens) virtual external returns (uint);\\n\\n    function transferAllowed(address cToken, address src, address dst, uint transferTokens) virtual external returns (uint);\\n\\n    /*** Liquidity/Liquidation Calculations ***/\\n\\n    function liquidateCalculateSeizeTokens(\\n        address cTokenBorrowed,\\n        address cTokenCollateral,\\n        uint repayAmount) virtual external view returns (uint, uint);\\n    \\n    function isValidSmartAccount(address account) virtual external returns (bool);\\n}\\n\",\"keccak256\":\"0xb82b5122924b11451c9402099e7e8e78512bb87d6451eb79ee334f9e42b20d32\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/EIP20Interface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title ERC 20 Token Standard Interface\\n *  https://eips.ethereum.org/EIPS/eip-20\\n */\\ninterface EIP20Interface {\\n    function name() external view returns (string memory);\\n    function symbol() external view returns (string memory);\\n    function decimals() external view returns (uint8);\\n\\n    /**\\n      * @notice Get the total number of tokens in circulation\\n      * @return The supply of tokens\\n      */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transfer(address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      * @return success Whether or not the transfer succeeded\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved (-1 means infinite)\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent (-1 means infinite)\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0xf44fc7783d4a0060119f0096a122c3f305c7a03da75aa21408393d8d7a2e649b\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/EIP20NonStandardInterface.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n * @title EIP20NonStandardInterface\\n * @dev Version of ERC20 with no return values for `transfer` and `transferFrom`\\n *  See https://medium.com/coinmonks/missing-return-value-bug-at-least-130-tokens-affected-d67bf08521ca\\n */\\ninterface EIP20NonStandardInterface {\\n\\n    /**\\n     * @notice Get the total number of tokens in circulation\\n     * @return The supply of tokens\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @notice Gets the balance of the specified address\\n     * @param owner The address from which the balance will be retrieved\\n     * @return balance The balance\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transfer` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `msg.sender` to `dst`\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transfer(address dst, uint256 amount) external;\\n\\n    ///\\n    /// !!!!!!!!!!!!!!\\n    /// !!! NOTICE !!! `transferFrom` does not return a value, in violation of the ERC-20 specification\\n    /// !!!!!!!!!!!!!!\\n    ///\\n\\n    /**\\n      * @notice Transfer `amount` tokens from `src` to `dst`\\n      * @param src The address of the source account\\n      * @param dst The address of the destination account\\n      * @param amount The number of tokens to transfer\\n      */\\n    function transferFrom(address src, address dst, uint256 amount) external;\\n\\n    /**\\n      * @notice Approve `spender` to transfer up to `amount` from `src`\\n      * @dev This will overwrite the approval amount for `spender`\\n      *  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)\\n      * @param spender The address of the account which may transfer tokens\\n      * @param amount The number of tokens that are approved\\n      * @return success Whether or not the approval succeeded\\n      */\\n    function approve(address spender, uint256 amount) external returns (bool success);\\n\\n    /**\\n      * @notice Get the current allowance from `owner` for `spender`\\n      * @param owner The address of the account which owns the tokens to be spent\\n      * @param spender The address of the account which may transfer tokens\\n      * @return remaining The number of tokens allowed to be spent\\n      */\\n    function allowance(address owner, address spender) external view returns (uint256 remaining);\\n\\n    event Transfer(address indexed from, address indexed to, uint256 amount);\\n    event Approval(address indexed owner, address indexed spender, uint256 amount);\\n}\\n\",\"keccak256\":\"0x5ce25bb36a4ec9490617567a24b55bc813e943bcd4411e060afffe122bea0416\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/ISmartAccount.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ninterface ISmartAccount {\\n    function getNonStandardCollateralAssetValue() external view returns (uint);\\n    function withdraw(address token, uint amount, address to) external;\\n    function liquidate(address borrower, address liquidator) external;\\n}\",\"keccak256\":\"0x53134860d9bd057b933455a3caf530379ddc803d720bc33026a3387e18b9da72\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/ISmartAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ninterface ISmartAccountFactory {\\n    function isValidSmartAccount(address account) external view returns (bool);\\n}\",\"keccak256\":\"0x96b67755801b576ece00e25d166da4eeb2a055701bb880bd73c0f76687f6aaef\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\ninterface IWETH {\\n  function balanceOf(address user) external returns (uint);\\n\\n  function approve(address to, uint value) external returns (bool);\\n\\n  function transfer(address to, uint value) external returns (bool);\\n\\n  function transferFrom(address src, address dst, uint256 amount) external returns (bool success);\\n\\n  function deposit() external payable;\\n\\n  function withdraw(uint) external;\\n}\",\"keccak256\":\"0xf434d42588d6e1410b5d28bff07457ef4e1970afb44edf00d2efff02d8b69ee5\",\"license\":\"BSD-3-Clause\"},\"contracts/Interfaces/InterestRateModel.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-3-Clause\\npragma solidity ^0.8.10;\\n\\n/**\\n  * @title Compound's InterestRateModel Interface\\n  * @author Compound\\n  */\\nabstract contract InterestRateModel {\\n    /// @notice Indicator that this is an InterestRateModel contract (for inspection)\\n    bool public constant isInterestRateModel = true;\\n\\n    /**\\n      * @notice Calculates the current borrow interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @return The borrow rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getBorrowRate(uint cash, uint borrows, uint reserves) virtual external view returns (uint);\\n\\n    /**\\n      * @notice Calculates the current supply interest rate per block\\n      * @param cash The total amount of cash the market has\\n      * @param borrows The total amount of borrows the market has outstanding\\n      * @param reserves The total amount of reserves the market has\\n      * @param reserveFactorMantissa The current reserve factor the market has\\n      * @return The supply rate per block (as a percentage, and scaled by 1e18)\\n      */\\n    function getSupplyRate(uint cash, uint borrows, uint reserves, uint reserveFactorMantissa) virtual external view returns (uint);\\n}\\n\",\"keccak256\":\"0x470821c8ff2120381ead6f54dba5c7b4fc0209682062bde51ea20291176aa0be\",\"license\":\"BSD-3-Clause\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506139ba806100206000396000f3fe6080604052600436106103395760003560e01c8063852a12e3116101ab578063b71d1a0c116100f7578063e9c714f211610095578063f851a4401161006f578063f851a4401461097a578063f8f9da281461099f578063fca7820b146109b4578063fe9c44ae146109d457600080fd5b8063e9c714f214610925578063f2b3abbd1461093a578063f3fdb15a1461095a57600080fd5b8063c5ebeaec116100d1578063c5ebeaec1461088c578063db006a75146108ac578063dd62ed3e146108cc578063e59746191461091257600080fd5b8063b71d1a0c14610817578063bd6d894d14610837578063c37f68e21461084c57600080fd5b80639af4ee7e11610164578063aa5af0fd1161013e578063aa5af0fd146107b9578063aae40a2a146107cf578063ae9d70b0146107e2578063b2a02ff1146107f757600080fd5b80639af4ee7e14610770578063a6afed9514610784578063a9059cbb1461079957600080fd5b8063852a12e3146106c557806388c21e41146106e55780638f840ddd1461070557806395d89b411461071b57806395dd91931461073057806399d8c1b41461075057600080fd5b80633b1d21a211610285578063601a0bf1116102235780636c540baf116101fd5780636c540baf146106445780636f307dc31461065a57806370a082311461067a57806373acee98146106b057600080fd5b8063601a0bf1146105f45780636752e7021461061457806369ab32501461062f57600080fd5b80634e4d9fea1161025f5780634e4d9fea1461058c57806356e67728146105945780635c60da1b146105b45780635fe3b567146105d457600080fd5b80633b1d21a2146105415780634576b5db1461055657806347bd37181461057657600080fd5b806318160ddd116102f257806323b872dd116102cc57806323b872dd1461049d57806326782247146104bd578063313ce567146104f55780633af9e6691461052157600080fd5b806318160ddd14610452578063182df0f5146104685780631a31d4651461047d57600080fd5b806306fdde0314610396578063095ea7b3146103c15780631249c58b146103f1578063153ab505146103f9578063173b99041461040e57806317bfdfbc1461043257600080fd5b36610391576011546001600160a01b0316331461038f5760405162461bcd60e51b815260206004820152600f60248201526e2177726170706564206e617469766560881b60448201526064015b60405180910390fd5b005b600080fd5b3480156103a257600080fd5b506103ab6109e9565b6040516103b89190613312565b60405180910390f35b3480156103cd57600080fd5b506103e16103dc366004613375565b610a77565b60405190151581526020016103b8565b61038f610ae7565b34801561040557600080fd5b5061038f610af2565b34801561041a57600080fd5b5061042460085481565b6040519081526020016103b8565b34801561043e57600080fd5b5061042461044d3660046133a1565b610b67565b34801561045e57600080fd5b50610424600d5481565b34801561047457600080fd5b50610424610bba565b34801561048957600080fd5b5061038f610498366004613480565b610bc9565b3480156104a957600080fd5b506103e16104b8366004613536565b610c5e565b3480156104c957600080fd5b506004546104dd906001600160a01b031681565b6040516001600160a01b0390911681526020016103b8565b34801561050157600080fd5b5060035461050f9060ff1681565b60405160ff90911681526020016103b8565b34801561052d57600080fd5b5061042461053c3660046133a1565b610cae565b34801561054d57600080fd5b50610424610ce7565b34801561056257600080fd5b506104246105713660046133a1565b610cf1565b34801561058257600080fd5b50610424600b5481565b61038f610e0f565b3480156105a057600080fd5b5061038f6105af366004613577565b610e18565b3480156105c057600080fd5b506012546104dd906001600160a01b031681565b3480156105e057600080fd5b506005546104dd906001600160a01b031681565b34801561060057600080fd5b5061042461060f3660046135c0565b610f02565b34801561062057600080fd5b50610424666379da05b6000081565b34801561063b57600080fd5b50610424600081565b34801561065057600080fd5b5061042460095481565b34801561066657600080fd5b506011546104dd906001600160a01b031681565b34801561068657600080fd5b506104246106953660046133a1565b6001600160a01b03166000908152600e602052604090205490565b3480156106bc57600080fd5b50610424610f41565b3480156106d157600080fd5b506104246106e03660046135c0565b610f8b565b3480156106f157600080fd5b5061038f610700366004613375565b610f9e565b34801561071157600080fd5b50610424600c5481565b34801561072757600080fd5b506103ab611289565b34801561073c57600080fd5b5061042461074b3660046133a1565b611296565b34801561075c57600080fd5b5061038f61076b3660046135d9565b6112a1565b34801561077c57600080fd5b5060016103e1565b34801561079057600080fd5b50610424611389565b3480156107a557600080fd5b506103e16107b4366004613375565b61151a565b3480156107c557600080fd5b50610424600a5481565b61038f6107dd36600461367b565b611569565b3480156107ee57600080fd5b50610424611574565b34801561080357600080fd5b50610424610812366004613536565b61160c565b34801561082357600080fd5b506104246108323660046133a1565b61165b565b34801561084357600080fd5b506104246116fb565b34801561085857600080fd5b5061086c6108673660046133a1565b61174b565b6040805194855260208501939093529183015260608201526080016103b8565b34801561089857600080fd5b506104246108a73660046135c0565b61178c565b3480156108b857600080fd5b506104246108c73660046135c0565b611797565b3480156108d857600080fd5b506104246108e736600461367b565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b61038f6109203660046133a1565b6117a2565b34801561093157600080fd5b506104246117af565b34801561094657600080fd5b506104246109553660046133a1565b6118bf565b34801561096657600080fd5b506006546104dd906001600160a01b031681565b34801561098657600080fd5b506003546104dd9061010090046001600160a01b031681565b3480156109ab57600080fd5b506104246118d3565b3480156109c057600080fd5b506104246109cf3660046135c0565b611926565b3480156109e057600080fd5b506103e1600181565b600180546109f6906136b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a22906136b4565b8015610a6f5780601f10610a4457610100808354040283529160200191610a6f565b820191906000526020600020905b815481529060010190602001808311610a5257829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610ad39087815260200190565b60405180910390a360019150505b92915050565b610af034611965565b565b60035461010090046001600160a01b03163314610af05760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e4960448201526c36b83632b6b2b73a30ba34b7b760991b6064820152608401610386565b6000805460ff16610b8a5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055610b9c611389565b50610ba682611296565b90506000805460ff19166001179055919050565b6000610bc46119b4565b905090565b610bd78686868686866112a1565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190613712565b5050505050505050565b6000805460ff16610c815760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19168155610c9733868686611a1c565b1490506000805460ff191660011790559392505050565b600080610cb96116fb565b6001600160a01b0384166000908152600e6020526040902054909150610ce0908290611c2b565b9392505050565b6000610bc4611c4b565b60035460009061010090046001600160a01b03163314610d245760405163d219dc1f60e01b815260040160405180910390fd5b816001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d85919061372b565b610da2576040516320d1611760e21b815260040160405180910390fd5b600554604080516001600160a01b03928316815291841660208301527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055600090565b610af034611cc0565b60035461010090046001600160a01b03163314610e8d5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d654960448201526c36b83632b6b2b73a30ba34b7b760991b6064820152608401610386565b478015610efe57601160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ee457600080fd5b505af1158015610ef8573d6000803e3d6000fd5b50505050505b5050565b6000805460ff16610f255760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055610f37611389565b50610ba682611d11565b6000805460ff16610f645760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055610f76611389565b5050600b546000805460ff1916600117905590565b6000610f9682611de4565b506000919050565b610fa6611389565b50600554604051631200453160e11b815233916000916001600160a01b03909116906324008a6290610fe290309086908990899060040161374d565b6020604051808303816000875af1158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190613712565b9050801561104957604051638c81362d60e01b815260048101829052602401610386565b436009541461106b5760405163c9021e2f60e01b815260040160405180910390fd5b600061107685611e25565b905060006000198514611089578461108b565b815b905060006110976119b4565b905060006110a58383611e71565b9050876001600160a01b0316866001600160a01b03161461115b5760055460405163eabe7d9160e01b81526001600160a01b039091169063eabe7d91906110f49030908a908690600401613777565b6020604051808303816000875af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190613712565b9450841561115b5760405163480f424760e01b815260048101869052602401610386565b80600d5461116991906137b1565b600d556001600160a01b0386166000908152600e60205260409020546111909082906137b1565b6001600160a01b0387166000908152600e60205260408120919091556111b684866137b1565b9050600084600b546111c891906137b1565b6001600160a01b03808c1660009081526010602052604090819020858155600a54600190910155600b839055519192503091908a16906000805160206139658339815191529061121b9087815260200190565b60405180910390a3604080516001600160a01b03808b1682528c16602082015290810186905260608101839052608081018290527f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a0015b60405180910390a150505050505050505050565b600280546109f6906136b4565b6000610ae182611e25565b60035461010090046001600160a01b031633146112d0576040516282b42960e81b815260040160405180910390fd5b6009541515806112e15750600a5415155b156112ff57604051630fa3c9cf60e01b815260040160405180910390fd5b600784905560008490036113265760405163b0c5349960e01b815260040160405180910390fd5b61132f86610cf1565b5043600955670de0b6b3a7640000600a5561134985611e8e565b5060016113568482613813565b5060026113638382613813565b506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60095460009043908181036113a15760009250505090565b60006113ab611c4b565b600b54600c54600a546006546040516315f2405360e01b81526004810186905260248101859052604481018490529495509293919290916000916001600160a01b0316906315f2405390606401602060405180830381865afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190613712565b905065048c273950008111156114625760405163ad30f1e160e01b815260040160405180910390fd5b600061146e87896137b1565b6009899055905060006114818383611fad565b9050600061148f8288611c2b565b905061149b87826138d3565b600b556008546114ac908288611fb9565b600c556114ba828680611fb9565b600a819055600b54604080518b8152602081018590529081019290925260608201527f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009a505050505050505050505090565b6000805460ff1661153d5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff1916815561155333808686611a1c565b1490506000805460ff1916600117905592915050565b610efe823483611fda565b6006546000906001600160a01b031663b8168816611590611c4b565b600b54600c546008546040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa1580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc49190613712565b6000805460ff1661162f5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611645338585856120b8565b50600080805460ff191660011790559392505050565b60035460009061010090046001600160a01b0316331461168e57604051635cb56c2b60e01b815260040160405180910390fd5b600454604080516001600160a01b03928316815291841660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055600090565b6000805460ff1661171e5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611730611389565b50611739610bba565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e6020526040812054819081908190819061177587611e25565b61177d6119b4565b93509350935093509193509193565b6000610f9682612301565b6000610f9682612340565b6117ac8134612381565b50565b6004546000906001600160a01b0316331415806117d557506004546001600160a01b0316155b156117f357604051631ba24f2960e21b815260040160405180910390fd5b600354600454604080516101009093046001600160a01b03908116845290911660208301527ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600454604080516001600160a01b039092168252600060208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a1506004805460038054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055600090565b60006118c9611389565b50610ae182611e8e565b6006546000906001600160a01b03166315f240536118ef611c4b565b600b54600c546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016115cb565b6000805460ff166119495760405162461bcd60e51b8152600401610386906136ee565b6000805460ff1916905561195b611389565b50610ba6826123d3565b60005460ff166119875760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611999611389565b506119a43382612474565b506000805460ff19166001179055565b600d546000908082036119c957505060075490565b60006119d3611c4b565b90506000600c54600b54836119e891906138d3565b6119f291906137b1565b9050600083611a09670de0b6b3a7640000846138e6565b611a1391906138fd565b95945050505050565b6005546040516317b9b84b60e31b815260009182916001600160a01b039091169063bdcdc25890611a5790309089908990899060040161374d565b6020604051808303816000875af1158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a9190613712565b90508015611abe5760405163089d427760e11b815260048101829052602401610386565b836001600160a01b0316856001600160a01b031603611af057604051638cd22d1960e01b815260040160405180910390fd5b6000856001600160a01b0316876001600160a01b031603611b145750600019611b3c565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b6001600160a01b0386166000908152600e6020526040902054611b609085906137b1565b6001600160a01b038088166000908152600e60205260408082209390935590871681522054611b909085906138d3565b6001600160a01b0386166000908152600e60205260409020556000198114611be357611bbc84826137b1565b6001600160a01b038088166000908152600f60209081526040808320938c16835292905220555b846001600160a01b0316866001600160a01b031660008051602061396583398151915286604051611c1691815260200190565b60405180910390a35060009695505050505050565b600080611c388484611fad565b9050611c438161261d565b949350505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba9190613712565b91505090565b60005460ff16611ce25760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611cf4611389565b50611d00333383612631565b50506000805460ff19166001179055565b600081611d1c611c4b565b1015611d3b57604051633345e99960e01b815260040160405180910390fd5b600c54821115611d5e576040516378d2980560e11b815260040160405180910390fd5b81600c54611d6c91906137b1565b600c55600354611d8a9061010090046001600160a01b0316836127cf565b7f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e600360019054906101000a90046001600160a01b031683600c54604051611dd49392919061391f565b60405180910390a1506000919050565b60005460ff16611e065760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611e18611389565b506119a43360008361286b565b6001600160a01b038116600090815260106020526040812080548203611e4e5750600092915050565b600a548154600091611e5f916138e6565b9050816001015481611c4391906138fd565b6000610ce0611e8884670de0b6b3a7640000612af3565b83612aff565b60035460009061010090046001600160a01b03163314611ec15760405163407fded560e01b815260040160405180910390fd5b816001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f23919061372b565b611f405760405163a710429d60e01b815260040160405180910390fd5b600654604080516001600160a01b03928316815291841660208301527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055600090565b6000610ce08383612af3565b600080611fc68585611fad565b9050611a13611fd48261261d565b84612b0b565b60005460ff16611ffc5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff1916905561200e611389565b506000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190613712565b9050801561209957604051633eea49b760e11b815260048101829052602401610386565b6120a533858585612b17565b50506000805460ff191660011790555050565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092169063d02f73519060a4016020604051808303816000875af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190613712565b9050801561216a576040516363e00e3360e11b815260048101829052602401610386565b836001600160a01b0316836001600160a01b03160361219c57604051633a94626760e11b815260040160405180910390fd5b60006121af83666379da05b6000061305d565b905060006121bd82856137b1565b905060006121c96119b4565b905060006121d78285611c2b565b9050600081600c546121e991906138d3565b600c819055600d549091506121ff9086906137b1565b600d556001600160a01b0388166000908152600e60205260409020546122269088906137b1565b6001600160a01b03808a166000908152600e602052604080822093909355908b16815220546122569085906138d3565b6001600160a01b03808b166000818152600e602052604090819020939093559151908a1690600080516020613965833981519152906122989088815260200190565b60405180910390a360405185815230906001600160a01b038a16906000805160206139658339815191529060200160405180910390a37fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc53083836040516112759392919061391f565b60005460ff166123235760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055612335611389565b506119a4338261307c565b60005460ff166123625760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055612374611389565b506119a43382600061286b565b60005460ff166123a35760405162461bcd60e51b8152600401610386906136ee565b6000805460ff191690556123b5611389565b506123c1338383612631565b50506000805460ff1916600117905550565b60035460009061010090046001600160a01b0316331461240657604051631205b57b60e11b815260040160405180910390fd5b670de0b6b3a764000082111561242f5760405163717220f360e11b815260040160405180910390fd5b60085460408051918252602082018490527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460910160405180910390a150600855600090565b600554604051634ef4c3e160e01b81526000916001600160a01b031690634ef4c3e1906124a990309087908790600401613777565b6020604051808303816000875af11580156124c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ec9190613712565b90508015612510576040516349abd4fd60e01b815260048101829052602401610386565b4360095414612532576040516338d8859760e01b815260040160405180910390fd5b600061253c6119b4565b9050600061254a858561321b565b905060006125588284611e71565b905080600d5461256891906138d3565b600d556001600160a01b0386166000908152600e602052604090205461258f9082906138d3565b6001600160a01b0387166000908152600e60205260409081902091909155517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f906125df9088908590859061391f565b60405180910390a16040518181526001600160a01b0387169030906000805160206139658339815191529060200160405180910390a3505050505050565b6000610ae1670de0b6b3a7640000836138fd565b600554604051631200453160e11b815260009182916001600160a01b03909116906324008a629061266c90309089908990899060040161374d565b6020604051808303816000875af115801561268b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126af9190613712565b905080156126d357604051638c81362d60e01b815260048101829052602401610386565b43600954146126f55760405163c9021e2f60e01b815260040160405180910390fd5b600061270085611e25565b9050600060001985146127135784612715565b815b90506000612723888361321b565b9050600061273182856137b1565b9050600082600b5461274391906137b1565b6001600160a01b038a8116600081815260106020908152604091829020878155600a54600190910155600b8590558151938f168452830191909152810185905260608101849052608081018290529091507f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a00160405180910390a1509098975050505050505050565b601154604051632e1a7d4d60e01b8152600481018390526001600160a01b03909116908190632e1a7d4d90602401600060405180830381600087803b15801561281757600080fd5b505af115801561282b573d6000803e3d6000fd5b50506040516001600160a01b038616925084156108fc02915084906000818181858888f19350505050158015612865573d6000803e3d6000fd5b50505050565b811580159061287957508015155b156128975760405163013c442960e21b815260040160405180910390fd5b60006128a16119b4565b905060008084156128c0578491506128b98386611c2b565b90506128d0565b6128ca8484611e71565b91508390505b60055460405163eabe7d9160e01b81526000916001600160a01b03169063eabe7d91906129059030908b908890600401613777565b6020604051808303816000875af1158015612924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129489190613712565b9050801561296c5760405163480f424760e01b815260048101829052602401610386565b436009541461298e576040516397b5cfcd60e01b815260040160405180910390fd5b81612997611c4b565b10156129b6576040516391240a1b60e01b815260040160405180910390fd5b82600d546129c491906137b1565b600d556001600160a01b0387166000908152600e60205260409020546129eb9084906137b1565b6001600160a01b0388166000908152600e6020526040902055612a0e87836127cf565b60405183815230906001600160a01b038916906000805160206139658339815191529060200160405180910390a37fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929878385604051612a6f9392919061391f565b60405180910390a16005546040516351dff98960e01b81523060048201526001600160a01b0389811660248301526044820185905260648201869052909116906351dff98990608401600060405180830381600087803b158015612ad257600080fd5b505af1158015612ae6573d6000803e3d6000fd5b5050505050505050505050565b6000610ce082846138e6565b6000610ce082846138fd565b6000610ce082846138d3565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000921690635fc7e71e9060a4016020604051808303816000875af1158015612b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba59190613712565b90508015612bc957604051630a14d17960e11b815260048101829052602401610386565b4360095414612beb576040516380965b1b60e01b815260040160405180910390fd5b43826001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190613712565b14612c6c57604051631046f38d60e31b815260040160405180910390fd5b846001600160a01b0316846001600160a01b031603612c9e57604051631bd1a62160e21b815260040160405180910390fd5b82600003612cbf5760405163d29da7ef60e01b815260040160405180910390fd5b6000198303612ce157604051635982c5bb60e11b815260040160405180910390fd5b6000612cee868686612631565b60055460405163c488847b60e01b81529192506000916001600160a01b039091169063c488847b90612d2890309088908790600401613777565b6040805180830381865afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d689190613940565b6005546040516332bf88c160e21b81526001600160a01b038a811660048301529294509116915063cafe2304906024016020604051808303816000875af1158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb919061372b565b15612ed95760008690506000816001600160a01b0316630fa013ac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e499190613712565b905082811015612e6c576040516350e4bf9960e11b815260040160405180910390fd5b6040516386b9d81f60e01b81526001600160a01b0389811660048301528a811660248301528316906386b9d81f90604401600060405180830381600087803b158015612eb757600080fd5b505af1158015612ecb573d6000803e3d6000fd5b505050505050505050612865565b6040516370a0823160e01b81526001600160a01b0387811660048301528291908616906370a0823190602401602060405180830381865afa158015612f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f469190613712565b1015612f65576040516350e4bf9960e11b815260040160405180910390fd5b306001600160a01b03851603612f8657612f81308888846120b8565b612ffb565b60405163b2a02ff160e01b81526001600160a01b0385169063b2a02ff190612fb6908a908a908690600401613777565b6020604051808303816000875af1158015612fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff99190613712565b505b604080516001600160a01b0389811682528881166020830152818301859052861660608201526080810183905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a150505050505050565b6000670de0b6b3a76400006130728484612af3565b610ce091906138fd565b60055460405163368f515360e21b81526000916001600160a01b03169063da3d454c906130b190309087908790600401613777565b6020604051808303816000875af11580156130d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f49190613712565b905080156131185760405163918db40f60e01b815260048101829052602401610386565b436009541461313a57604051630e8d8c6160e21b815260040160405180910390fd5b81613143611c4b565b1015613162576040516348c2588160e01b815260040160405180910390fd5b600061316d84611e25565b9050600061317b84836138d3565b9050600084600b5461318d91906138d3565b6001600160a01b0387166000908152601060205260409020838155600a54600190910155600b81905590506131c286866127cf565b604080516001600160a01b038816815260208101879052908101839052606081018290527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a1505050505050565b6000336001600160a01b038416146132675760405162461bcd60e51b815260206004820152600f60248201526e0e6cadcc8cae440dad2e6dac2e8c6d608b1b6044820152606401610386565b8134146132a75760405162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca40dad2e6dac2e8c6d60931b6044820152606401610386565b60115460408051630d0e30db60e41b815290516001600160a01b0390921691829163d0e30db091869160048082019260009290919082900301818588803b1580156132f157600080fd5b505af1158015613305573d6000803e3d6000fd5b5095979650505050505050565b600060208083528351808285015260005b8181101561333f57858101830151858201604001528201613323565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146117ac57600080fd5b6000806040838503121561338857600080fd5b823561339381613360565b946020939093013593505050565b6000602082840312156133b357600080fd5b8135610ce081613360565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156133ef576133ef6133be565b604051601f8501601f19908116603f01168101908282118183101715613417576134176133be565b8160405280935085815286868601111561343057600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261345b57600080fd5b610ce0838335602085016133d4565b803560ff8116811461347b57600080fd5b919050565b600080600080600080600060e0888a03121561349b57600080fd5b87356134a681613360565b965060208801356134b681613360565b955060408801356134c681613360565b945060608801359350608088013567ffffffffffffffff808211156134ea57600080fd5b6134f68b838c0161344a565b945060a08a013591508082111561350c57600080fd5b506135198a828b0161344a565b92505061352860c0890161346a565b905092959891949750929550565b60008060006060848603121561354b57600080fd5b833561355681613360565b9250602084013561356681613360565b929592945050506040919091013590565b60006020828403121561358957600080fd5b813567ffffffffffffffff8111156135a057600080fd5b8201601f810184136135b157600080fd5b611c43848235602084016133d4565b6000602082840312156135d257600080fd5b5035919050565b60008060008060008060c087890312156135f257600080fd5b86356135fd81613360565b9550602087013561360d81613360565b945060408701359350606087013567ffffffffffffffff8082111561363157600080fd5b61363d8a838b0161344a565b9450608089013591508082111561365357600080fd5b5061366089828a0161344a565b92505061366f60a0880161346a565b90509295509295509295565b6000806040838503121561368e57600080fd5b823561369981613360565b915060208301356136a981613360565b809150509250929050565b600181811c908216806136c857607f821691505b6020821081036136e857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b60006020828403121561372457600080fd5b5051919050565b60006020828403121561373d57600080fd5b81518015158114610ce057600080fd5b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ae157610ae161379b565b601f82111561380e57600081815260208120601f850160051c810160208610156137eb5750805b601f850160051c820191505b8181101561380a578281556001016137f7565b5050505b505050565b815167ffffffffffffffff81111561382d5761382d6133be565b6138418161383b84546136b4565b846137c4565b602080601f831160018114613876576000841561385e5750858301515b600019600386901b1c1916600185901b17855561380a565b600085815260208120601f198616915b828110156138a557888601518255948401946001909101908401613886565b50858210156138c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610ae157610ae161379b565b8082028115828204841417610ae157610ae161379b565b60008261391a57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039390931683526020830191909152604082015260600190565b6000806040838503121561395357600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220cda76b698c7b14a56fdc66128fef9e57b702a945355a1270953d107030d6aacd64736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106103395760003560e01c8063852a12e3116101ab578063b71d1a0c116100f7578063e9c714f211610095578063f851a4401161006f578063f851a4401461097a578063f8f9da281461099f578063fca7820b146109b4578063fe9c44ae146109d457600080fd5b8063e9c714f214610925578063f2b3abbd1461093a578063f3fdb15a1461095a57600080fd5b8063c5ebeaec116100d1578063c5ebeaec1461088c578063db006a75146108ac578063dd62ed3e146108cc578063e59746191461091257600080fd5b8063b71d1a0c14610817578063bd6d894d14610837578063c37f68e21461084c57600080fd5b80639af4ee7e11610164578063aa5af0fd1161013e578063aa5af0fd146107b9578063aae40a2a146107cf578063ae9d70b0146107e2578063b2a02ff1146107f757600080fd5b80639af4ee7e14610770578063a6afed9514610784578063a9059cbb1461079957600080fd5b8063852a12e3146106c557806388c21e41146106e55780638f840ddd1461070557806395d89b411461071b57806395dd91931461073057806399d8c1b41461075057600080fd5b80633b1d21a211610285578063601a0bf1116102235780636c540baf116101fd5780636c540baf146106445780636f307dc31461065a57806370a082311461067a57806373acee98146106b057600080fd5b8063601a0bf1146105f45780636752e7021461061457806369ab32501461062f57600080fd5b80634e4d9fea1161025f5780634e4d9fea1461058c57806356e67728146105945780635c60da1b146105b45780635fe3b567146105d457600080fd5b80633b1d21a2146105415780634576b5db1461055657806347bd37181461057657600080fd5b806318160ddd116102f257806323b872dd116102cc57806323b872dd1461049d57806326782247146104bd578063313ce567146104f55780633af9e6691461052157600080fd5b806318160ddd14610452578063182df0f5146104685780631a31d4651461047d57600080fd5b806306fdde0314610396578063095ea7b3146103c15780631249c58b146103f1578063153ab505146103f9578063173b99041461040e57806317bfdfbc1461043257600080fd5b36610391576011546001600160a01b0316331461038f5760405162461bcd60e51b815260206004820152600f60248201526e2177726170706564206e617469766560881b60448201526064015b60405180910390fd5b005b600080fd5b3480156103a257600080fd5b506103ab6109e9565b6040516103b89190613312565b60405180910390f35b3480156103cd57600080fd5b506103e16103dc366004613375565b610a77565b60405190151581526020016103b8565b61038f610ae7565b34801561040557600080fd5b5061038f610af2565b34801561041a57600080fd5b5061042460085481565b6040519081526020016103b8565b34801561043e57600080fd5b5061042461044d3660046133a1565b610b67565b34801561045e57600080fd5b50610424600d5481565b34801561047457600080fd5b50610424610bba565b34801561048957600080fd5b5061038f610498366004613480565b610bc9565b3480156104a957600080fd5b506103e16104b8366004613536565b610c5e565b3480156104c957600080fd5b506004546104dd906001600160a01b031681565b6040516001600160a01b0390911681526020016103b8565b34801561050157600080fd5b5060035461050f9060ff1681565b60405160ff90911681526020016103b8565b34801561052d57600080fd5b5061042461053c3660046133a1565b610cae565b34801561054d57600080fd5b50610424610ce7565b34801561056257600080fd5b506104246105713660046133a1565b610cf1565b34801561058257600080fd5b50610424600b5481565b61038f610e0f565b3480156105a057600080fd5b5061038f6105af366004613577565b610e18565b3480156105c057600080fd5b506012546104dd906001600160a01b031681565b3480156105e057600080fd5b506005546104dd906001600160a01b031681565b34801561060057600080fd5b5061042461060f3660046135c0565b610f02565b34801561062057600080fd5b50610424666379da05b6000081565b34801561063b57600080fd5b50610424600081565b34801561065057600080fd5b5061042460095481565b34801561066657600080fd5b506011546104dd906001600160a01b031681565b34801561068657600080fd5b506104246106953660046133a1565b6001600160a01b03166000908152600e602052604090205490565b3480156106bc57600080fd5b50610424610f41565b3480156106d157600080fd5b506104246106e03660046135c0565b610f8b565b3480156106f157600080fd5b5061038f610700366004613375565b610f9e565b34801561071157600080fd5b50610424600c5481565b34801561072757600080fd5b506103ab611289565b34801561073c57600080fd5b5061042461074b3660046133a1565b611296565b34801561075c57600080fd5b5061038f61076b3660046135d9565b6112a1565b34801561077c57600080fd5b5060016103e1565b34801561079057600080fd5b50610424611389565b3480156107a557600080fd5b506103e16107b4366004613375565b61151a565b3480156107c557600080fd5b50610424600a5481565b61038f6107dd36600461367b565b611569565b3480156107ee57600080fd5b50610424611574565b34801561080357600080fd5b50610424610812366004613536565b61160c565b34801561082357600080fd5b506104246108323660046133a1565b61165b565b34801561084357600080fd5b506104246116fb565b34801561085857600080fd5b5061086c6108673660046133a1565b61174b565b6040805194855260208501939093529183015260608201526080016103b8565b34801561089857600080fd5b506104246108a73660046135c0565b61178c565b3480156108b857600080fd5b506104246108c73660046135c0565b611797565b3480156108d857600080fd5b506104246108e736600461367b565b6001600160a01b039182166000908152600f6020908152604080832093909416825291909152205490565b61038f6109203660046133a1565b6117a2565b34801561093157600080fd5b506104246117af565b34801561094657600080fd5b506104246109553660046133a1565b6118bf565b34801561096657600080fd5b506006546104dd906001600160a01b031681565b34801561098657600080fd5b506003546104dd9061010090046001600160a01b031681565b3480156109ab57600080fd5b506104246118d3565b3480156109c057600080fd5b506104246109cf3660046135c0565b611926565b3480156109e057600080fd5b506103e1600181565b600180546109f6906136b4565b80601f0160208091040260200160405190810160405280929190818152602001828054610a22906136b4565b8015610a6f5780601f10610a4457610100808354040283529160200191610a6f565b820191906000526020600020905b815481529060010190602001808311610a5257829003601f168201915b505050505081565b336000818152600f602090815260408083206001600160a01b03871680855292528083208590555191929182907f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92590610ad39087815260200190565b60405180910390a360019150505b92915050565b610af034611965565b565b60035461010090046001600160a01b03163314610af05760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f72657369676e4960448201526c36b83632b6b2b73a30ba34b7b760991b6064820152608401610386565b6000805460ff16610b8a5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055610b9c611389565b50610ba682611296565b90506000805460ff19166001179055919050565b6000610bc46119b4565b905090565b610bd78686868686866112a1565b601180546001600160a01b0319166001600160a01b038916908117909155604080516318160ddd60e01b815290516318160ddd916004808201926020929091908290030181865afa158015610c30573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c549190613712565b5050505050505050565b6000805460ff16610c815760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19168155610c9733868686611a1c565b1490506000805460ff191660011790559392505050565b600080610cb96116fb565b6001600160a01b0384166000908152600e6020526040902054909150610ce0908290611c2b565b9392505050565b6000610bc4611c4b565b60035460009061010090046001600160a01b03163314610d245760405163d219dc1f60e01b815260040160405180910390fd5b816001600160a01b0316627e3dd26040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d61573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d85919061372b565b610da2576040516320d1611760e21b815260040160405180910390fd5b600554604080516001600160a01b03928316815291841660208301527f7ac369dbd14fa5ea3f473ed67cc9d598964a77501540ba6751eb0b3decf5870d910160405180910390a150600580546001600160a01b0319166001600160a01b0392909216919091179055600090565b610af034611cc0565b60035461010090046001600160a01b03163314610e8d5760405162461bcd60e51b815260206004820152602d60248201527f6f6e6c79207468652061646d696e206d61792063616c6c205f6265636f6d654960448201526c36b83632b6b2b73a30ba34b7b760991b6064820152608401610386565b478015610efe57601160009054906101000a90046001600160a01b03166001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015610ee457600080fd5b505af1158015610ef8573d6000803e3d6000fd5b50505050505b5050565b6000805460ff16610f255760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055610f37611389565b50610ba682611d11565b6000805460ff16610f645760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055610f76611389565b5050600b546000805460ff1916600117905590565b6000610f9682611de4565b506000919050565b610fa6611389565b50600554604051631200453160e11b815233916000916001600160a01b03909116906324008a6290610fe290309086908990899060040161374d565b6020604051808303816000875af1158015611001573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110259190613712565b9050801561104957604051638c81362d60e01b815260048101829052602401610386565b436009541461106b5760405163c9021e2f60e01b815260040160405180910390fd5b600061107685611e25565b905060006000198514611089578461108b565b815b905060006110976119b4565b905060006110a58383611e71565b9050876001600160a01b0316866001600160a01b03161461115b5760055460405163eabe7d9160e01b81526001600160a01b039091169063eabe7d91906110f49030908a908690600401613777565b6020604051808303816000875af1158015611113573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111379190613712565b9450841561115b5760405163480f424760e01b815260048101869052602401610386565b80600d5461116991906137b1565b600d556001600160a01b0386166000908152600e60205260409020546111909082906137b1565b6001600160a01b0387166000908152600e60205260408120919091556111b684866137b1565b9050600084600b546111c891906137b1565b6001600160a01b03808c1660009081526010602052604090819020858155600a54600190910155600b839055519192503091908a16906000805160206139658339815191529061121b9087815260200190565b60405180910390a3604080516001600160a01b03808b1682528c16602082015290810186905260608101839052608081018290527f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a0015b60405180910390a150505050505050505050565b600280546109f6906136b4565b6000610ae182611e25565b60035461010090046001600160a01b031633146112d0576040516282b42960e81b815260040160405180910390fd5b6009541515806112e15750600a5415155b156112ff57604051630fa3c9cf60e01b815260040160405180910390fd5b600784905560008490036113265760405163b0c5349960e01b815260040160405180910390fd5b61132f86610cf1565b5043600955670de0b6b3a7640000600a5561134985611e8e565b5060016113568482613813565b5060026113638382613813565b506003805460ff90921660ff199283161790556000805490911660011790555050505050565b60095460009043908181036113a15760009250505090565b60006113ab611c4b565b600b54600c54600a546006546040516315f2405360e01b81526004810186905260248101859052604481018490529495509293919290916000916001600160a01b0316906315f2405390606401602060405180830381865afa158015611415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114399190613712565b905065048c273950008111156114625760405163ad30f1e160e01b815260040160405180910390fd5b600061146e87896137b1565b6009899055905060006114818383611fad565b9050600061148f8288611c2b565b905061149b87826138d3565b600b556008546114ac908288611fb9565b600c556114ba828680611fb9565b600a819055600b54604080518b8152602081018590529081019290925260608201527f4dec04e750ca11537cabcd8a9eab06494de08da3735bc8871cd41250e190bc049060800160405180910390a160009a505050505050505050505090565b6000805460ff1661153d5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff1916815561155333808686611a1c565b1490506000805460ff1916600117905592915050565b610efe823483611fda565b6006546000906001600160a01b031663b8168816611590611c4b565b600b54600c546008546040516001600160e01b031960e087901b16815260048101949094526024840192909252604483015260648201526084015b602060405180830381865afa1580156115e8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bc49190613712565b6000805460ff1661162f5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611645338585856120b8565b50600080805460ff191660011790559392505050565b60035460009061010090046001600160a01b0316331461168e57604051635cb56c2b60e01b815260040160405180910390fd5b600454604080516001600160a01b03928316815291841660208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a150600480546001600160a01b0319166001600160a01b0392909216919091179055600090565b6000805460ff1661171e5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611730611389565b50611739610bba565b90506000805460ff1916600117905590565b6001600160a01b0381166000908152600e6020526040812054819081908190819061177587611e25565b61177d6119b4565b93509350935093509193509193565b6000610f9682612301565b6000610f9682612340565b6117ac8134612381565b50565b6004546000906001600160a01b0316331415806117d557506004546001600160a01b0316155b156117f357604051631ba24f2960e21b815260040160405180910390fd5b600354600454604080516101009093046001600160a01b03908116845290911660208301527ff9ffabca9c8276e99321725bcb43fb076a6c66a54b7f21c4e8146d8519b417dc910160405180910390a1600454604080516001600160a01b039092168252600060208301527fca4f2f25d0898edd99413412fb94012f9e54ec8142f9b093e7720646a95b16a9910160405180910390a1506004805460038054610100600160a81b0319166101006001600160a01b038416021790556001600160a01b0319169055600090565b60006118c9611389565b50610ae182611e8e565b6006546000906001600160a01b03166315f240536118ef611c4b565b600b54600c546040516001600160e01b031960e086901b1681526004810193909352602483019190915260448201526064016115cb565b6000805460ff166119495760405162461bcd60e51b8152600401610386906136ee565b6000805460ff1916905561195b611389565b50610ba6826123d3565b60005460ff166119875760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611999611389565b506119a43382612474565b506000805460ff19166001179055565b600d546000908082036119c957505060075490565b60006119d3611c4b565b90506000600c54600b54836119e891906138d3565b6119f291906137b1565b9050600083611a09670de0b6b3a7640000846138e6565b611a1391906138fd565b95945050505050565b6005546040516317b9b84b60e31b815260009182916001600160a01b039091169063bdcdc25890611a5790309089908990899060040161374d565b6020604051808303816000875af1158015611a76573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a9a9190613712565b90508015611abe5760405163089d427760e11b815260048101829052602401610386565b836001600160a01b0316856001600160a01b031603611af057604051638cd22d1960e01b815260040160405180910390fd5b6000856001600160a01b0316876001600160a01b031603611b145750600019611b3c565b506001600160a01b038086166000908152600f60209081526040808320938a16835292905220545b6001600160a01b0386166000908152600e6020526040902054611b609085906137b1565b6001600160a01b038088166000908152600e60205260408082209390935590871681522054611b909085906138d3565b6001600160a01b0386166000908152600e60205260409020556000198114611be357611bbc84826137b1565b6001600160a01b038088166000908152600f60209081526040808320938c16835292905220555b846001600160a01b0316866001600160a01b031660008051602061396583398151915286604051611c1691815260200190565b60405180910390a35060009695505050505050565b600080611c388484611fad565b9050611c438161261d565b949350505050565b6011546040516370a0823160e01b81523060048201526000916001600160a01b03169081906370a0823190602401602060405180830381865afa158015611c96573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cba9190613712565b91505090565b60005460ff16611ce25760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611cf4611389565b50611d00333383612631565b50506000805460ff19166001179055565b600081611d1c611c4b565b1015611d3b57604051633345e99960e01b815260040160405180910390fd5b600c54821115611d5e576040516378d2980560e11b815260040160405180910390fd5b81600c54611d6c91906137b1565b600c55600354611d8a9061010090046001600160a01b0316836127cf565b7f3bad0c59cf2f06e7314077049f48a93578cd16f5ef92329f1dab1420a99c177e600360019054906101000a90046001600160a01b031683600c54604051611dd49392919061391f565b60405180910390a1506000919050565b60005460ff16611e065760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055611e18611389565b506119a43360008361286b565b6001600160a01b038116600090815260106020526040812080548203611e4e5750600092915050565b600a548154600091611e5f916138e6565b9050816001015481611c4391906138fd565b6000610ce0611e8884670de0b6b3a7640000612af3565b83612aff565b60035460009061010090046001600160a01b03163314611ec15760405163407fded560e01b815260040160405180910390fd5b816001600160a01b0316632191f92a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611eff573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f23919061372b565b611f405760405163a710429d60e01b815260040160405180910390fd5b600654604080516001600160a01b03928316815291841660208301527fedffc32e068c7c95dfd4bdfd5c4d939a084d6b11c4199eac8436ed234d72f926910160405180910390a150600680546001600160a01b0319166001600160a01b0392909216919091179055600090565b6000610ce08383612af3565b600080611fc68585611fad565b9050611a13611fd48261261d565b84612b0b565b60005460ff16611ffc5760405162461bcd60e51b8152600401610386906136ee565b6000805460ff1916905561200e611389565b506000816001600160a01b031663a6afed956040518163ffffffff1660e01b81526004016020604051808303816000875af1158015612051573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906120759190613712565b9050801561209957604051633eea49b760e11b815260048101829052602401610386565b6120a533858585612b17565b50506000805460ff191660011790555050565b60055460405163d02f735160e01b81523060048201526001600160a01b0386811660248301528581166044830152848116606483015260848201849052600092169063d02f73519060a4016020604051808303816000875af1158015612122573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906121469190613712565b9050801561216a576040516363e00e3360e11b815260048101829052602401610386565b836001600160a01b0316836001600160a01b03160361219c57604051633a94626760e11b815260040160405180910390fd5b60006121af83666379da05b6000061305d565b905060006121bd82856137b1565b905060006121c96119b4565b905060006121d78285611c2b565b9050600081600c546121e991906138d3565b600c819055600d549091506121ff9086906137b1565b600d556001600160a01b0388166000908152600e60205260409020546122269088906137b1565b6001600160a01b03808a166000908152600e602052604080822093909355908b16815220546122569085906138d3565b6001600160a01b03808b166000818152600e602052604090819020939093559151908a1690600080516020613965833981519152906122989088815260200190565b60405180910390a360405185815230906001600160a01b038a16906000805160206139658339815191529060200160405180910390a37fa91e67c5ea634cd43a12c5a482724b03de01e85ca68702a53d0c2f45cb7c1dc53083836040516112759392919061391f565b60005460ff166123235760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055612335611389565b506119a4338261307c565b60005460ff166123625760405162461bcd60e51b8152600401610386906136ee565b6000805460ff19169055612374611389565b506119a43382600061286b565b60005460ff166123a35760405162461bcd60e51b8152600401610386906136ee565b6000805460ff191690556123b5611389565b506123c1338383612631565b50506000805460ff1916600117905550565b60035460009061010090046001600160a01b0316331461240657604051631205b57b60e11b815260040160405180910390fd5b670de0b6b3a764000082111561242f5760405163717220f360e11b815260040160405180910390fd5b60085460408051918252602082018490527faaa68312e2ea9d50e16af5068410ab56e1a1fd06037b1a35664812c30f821460910160405180910390a150600855600090565b600554604051634ef4c3e160e01b81526000916001600160a01b031690634ef4c3e1906124a990309087908790600401613777565b6020604051808303816000875af11580156124c8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906124ec9190613712565b90508015612510576040516349abd4fd60e01b815260048101829052602401610386565b4360095414612532576040516338d8859760e01b815260040160405180910390fd5b600061253c6119b4565b9050600061254a858561321b565b905060006125588284611e71565b905080600d5461256891906138d3565b600d556001600160a01b0386166000908152600e602052604090205461258f9082906138d3565b6001600160a01b0387166000908152600e60205260409081902091909155517f4c209b5fc8ad50758f13e2e1088ba56a560dff690a1c6fef26394f4c03821c4f906125df9088908590859061391f565b60405180910390a16040518181526001600160a01b0387169030906000805160206139658339815191529060200160405180910390a3505050505050565b6000610ae1670de0b6b3a7640000836138fd565b600554604051631200453160e11b815260009182916001600160a01b03909116906324008a629061266c90309089908990899060040161374d565b6020604051808303816000875af115801561268b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126af9190613712565b905080156126d357604051638c81362d60e01b815260048101829052602401610386565b43600954146126f55760405163c9021e2f60e01b815260040160405180910390fd5b600061270085611e25565b9050600060001985146127135784612715565b815b90506000612723888361321b565b9050600061273182856137b1565b9050600082600b5461274391906137b1565b6001600160a01b038a8116600081815260106020908152604091829020878155600a54600190910155600b8590558151938f168452830191909152810185905260608101849052608081018290529091507f1a2a22cb034d26d1854bdc6666a5b91fe25efbbb5dcad3b0355478d6f5c362a19060a00160405180910390a1509098975050505050505050565b601154604051632e1a7d4d60e01b8152600481018390526001600160a01b03909116908190632e1a7d4d90602401600060405180830381600087803b15801561281757600080fd5b505af115801561282b573d6000803e3d6000fd5b50506040516001600160a01b038616925084156108fc02915084906000818181858888f19350505050158015612865573d6000803e3d6000fd5b50505050565b811580159061287957508015155b156128975760405163013c442960e21b815260040160405180910390fd5b60006128a16119b4565b905060008084156128c0578491506128b98386611c2b565b90506128d0565b6128ca8484611e71565b91508390505b60055460405163eabe7d9160e01b81526000916001600160a01b03169063eabe7d91906129059030908b908890600401613777565b6020604051808303816000875af1158015612924573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906129489190613712565b9050801561296c5760405163480f424760e01b815260048101829052602401610386565b436009541461298e576040516397b5cfcd60e01b815260040160405180910390fd5b81612997611c4b565b10156129b6576040516391240a1b60e01b815260040160405180910390fd5b82600d546129c491906137b1565b600d556001600160a01b0387166000908152600e60205260409020546129eb9084906137b1565b6001600160a01b0388166000908152600e6020526040902055612a0e87836127cf565b60405183815230906001600160a01b038916906000805160206139658339815191529060200160405180910390a37fe5b754fb1abb7f01b499791d0b820ae3b6af3424ac1c59768edb53f4ec31a929878385604051612a6f9392919061391f565b60405180910390a16005546040516351dff98960e01b81523060048201526001600160a01b0389811660248301526044820185905260648201869052909116906351dff98990608401600060405180830381600087803b158015612ad257600080fd5b505af1158015612ae6573d6000803e3d6000fd5b5050505050505050505050565b6000610ce082846138e6565b6000610ce082846138fd565b6000610ce082846138d3565b600554604051632fe3f38f60e11b81523060048201526001600160a01b03838116602483015286811660448301528581166064830152608482018590526000921690635fc7e71e9060a4016020604051808303816000875af1158015612b81573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ba59190613712565b90508015612bc957604051630a14d17960e11b815260048101829052602401610386565b4360095414612beb576040516380965b1b60e01b815260040160405180910390fd5b43826001600160a01b0316636c540baf6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612c2a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c4e9190613712565b14612c6c57604051631046f38d60e31b815260040160405180910390fd5b846001600160a01b0316846001600160a01b031603612c9e57604051631bd1a62160e21b815260040160405180910390fd5b82600003612cbf5760405163d29da7ef60e01b815260040160405180910390fd5b6000198303612ce157604051635982c5bb60e11b815260040160405180910390fd5b6000612cee868686612631565b60055460405163c488847b60e01b81529192506000916001600160a01b039091169063c488847b90612d2890309088908790600401613777565b6040805180830381865afa158015612d44573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612d689190613940565b6005546040516332bf88c160e21b81526001600160a01b038a811660048301529294509116915063cafe2304906024016020604051808303816000875af1158015612db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ddb919061372b565b15612ed95760008690506000816001600160a01b0316630fa013ac6040518163ffffffff1660e01b8152600401602060405180830381865afa158015612e25573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612e499190613712565b905082811015612e6c576040516350e4bf9960e11b815260040160405180910390fd5b6040516386b9d81f60e01b81526001600160a01b0389811660048301528a811660248301528316906386b9d81f90604401600060405180830381600087803b158015612eb757600080fd5b505af1158015612ecb573d6000803e3d6000fd5b505050505050505050612865565b6040516370a0823160e01b81526001600160a01b0387811660048301528291908616906370a0823190602401602060405180830381865afa158015612f22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612f469190613712565b1015612f65576040516350e4bf9960e11b815260040160405180910390fd5b306001600160a01b03851603612f8657612f81308888846120b8565b612ffb565b60405163b2a02ff160e01b81526001600160a01b0385169063b2a02ff190612fb6908a908a908690600401613777565b6020604051808303816000875af1158015612fd5573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612ff99190613712565b505b604080516001600160a01b0389811682528881166020830152818301859052861660608201526080810183905290517f298637f684da70674f26509b10f07ec2fbc77a335ab1e7d6215a4b2484d8bb529181900360a00190a150505050505050565b6000670de0b6b3a76400006130728484612af3565b610ce091906138fd565b60055460405163368f515360e21b81526000916001600160a01b03169063da3d454c906130b190309087908790600401613777565b6020604051808303816000875af11580156130d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906130f49190613712565b905080156131185760405163918db40f60e01b815260048101829052602401610386565b436009541461313a57604051630e8d8c6160e21b815260040160405180910390fd5b81613143611c4b565b1015613162576040516348c2588160e01b815260040160405180910390fd5b600061316d84611e25565b9050600061317b84836138d3565b9050600084600b5461318d91906138d3565b6001600160a01b0387166000908152601060205260409020838155600a54600190910155600b81905590506131c286866127cf565b604080516001600160a01b038816815260208101879052908101839052606081018290527f13ed6866d4e1ee6da46f845c46d7e54120883d75c5ea9a2dacc1c4ca8984ab809060800160405180910390a1505050505050565b6000336001600160a01b038416146132675760405162461bcd60e51b815260206004820152600f60248201526e0e6cadcc8cae440dad2e6dac2e8c6d608b1b6044820152606401610386565b8134146132a75760405162461bcd60e51b815260206004820152600e60248201526d0ecc2d8eaca40dad2e6dac2e8c6d60931b6044820152606401610386565b60115460408051630d0e30db60e41b815290516001600160a01b0390921691829163d0e30db091869160048082019260009290919082900301818588803b1580156132f157600080fd5b505af1158015613305573d6000803e3d6000fd5b5095979650505050505050565b600060208083528351808285015260005b8181101561333f57858101830151858201604001528201613323565b506000604082860101526040601f19601f8301168501019250505092915050565b6001600160a01b03811681146117ac57600080fd5b6000806040838503121561338857600080fd5b823561339381613360565b946020939093013593505050565b6000602082840312156133b357600080fd5b8135610ce081613360565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff808411156133ef576133ef6133be565b604051601f8501601f19908116603f01168101908282118183101715613417576134176133be565b8160405280935085815286868601111561343057600080fd5b858560208301376000602087830101525050509392505050565b600082601f83011261345b57600080fd5b610ce0838335602085016133d4565b803560ff8116811461347b57600080fd5b919050565b600080600080600080600060e0888a03121561349b57600080fd5b87356134a681613360565b965060208801356134b681613360565b955060408801356134c681613360565b945060608801359350608088013567ffffffffffffffff808211156134ea57600080fd5b6134f68b838c0161344a565b945060a08a013591508082111561350c57600080fd5b506135198a828b0161344a565b92505061352860c0890161346a565b905092959891949750929550565b60008060006060848603121561354b57600080fd5b833561355681613360565b9250602084013561356681613360565b929592945050506040919091013590565b60006020828403121561358957600080fd5b813567ffffffffffffffff8111156135a057600080fd5b8201601f810184136135b157600080fd5b611c43848235602084016133d4565b6000602082840312156135d257600080fd5b5035919050565b60008060008060008060c087890312156135f257600080fd5b86356135fd81613360565b9550602087013561360d81613360565b945060408701359350606087013567ffffffffffffffff8082111561363157600080fd5b61363d8a838b0161344a565b9450608089013591508082111561365357600080fd5b5061366089828a0161344a565b92505061366f60a0880161346a565b90509295509295509295565b6000806040838503121561368e57600080fd5b823561369981613360565b915060208301356136a981613360565b809150509250929050565b600181811c908216806136c857607f821691505b6020821081036136e857634e487b7160e01b600052602260045260246000fd5b50919050565b6020808252600a90820152691c994b595b9d195c995960b21b604082015260600190565b60006020828403121561372457600080fd5b5051919050565b60006020828403121561373d57600080fd5b81518015158114610ce057600080fd5b6001600160a01b039485168152928416602084015292166040820152606081019190915260800190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b634e487b7160e01b600052601160045260246000fd5b81810381811115610ae157610ae161379b565b601f82111561380e57600081815260208120601f850160051c810160208610156137eb5750805b601f850160051c820191505b8181101561380a578281556001016137f7565b5050505b505050565b815167ffffffffffffffff81111561382d5761382d6133be565b6138418161383b84546136b4565b846137c4565b602080601f831160018114613876576000841561385e5750858301515b600019600386901b1c1916600185901b17855561380a565b600085815260208120601f198616915b828110156138a557888601518255948401946001909101908401613886565b50858210156138c35787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b80820180821115610ae157610ae161379b565b8082028115828204841417610ae157610ae161379b565b60008261391a57634e487b7160e01b600052601260045260246000fd5b500490565b6001600160a01b039390931683526020830191909152604082015260600190565b6000806040838503121561395357600080fd5b50508051602090910151909290915056feddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3efa2646970667358221220cda76b698c7b14a56fdc66128fef9e57b702a945355a1270953d107030d6aacd64736f6c63430008110033",
  "devdoc": {
    "author": "Compound",
    "kind": "dev",
    "methods": {
      "_acceptAdmin()": {
        "details": "Admin function for pending admin to accept role and update admin",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_becomeImplementation(bytes)": {
        "params": {
          "data": "The encoded bytes data for any initialization"
        }
      },
      "_reduceReserves(uint256)": {
        "params": {
          "reduceAmount": "Amount of reduction to reserves"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setComptroller(address)": {
        "details": "Admin function to set a new comptroller",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setInterestRateModel(address)": {
        "details": "Admin function to accrue interest and update the interest rate model",
        "params": {
          "newInterestRateModel": "the new interest rate model to use"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setPendingAdmin(address)": {
        "details": "Admin function to begin change of admin. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer.",
        "params": {
          "newPendingAdmin": "New pending admin."
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "_setReserveFactor(uint256)": {
        "details": "Admin function to accrue interest and set a new reserve factor",
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "accrueInterest()": {
        "details": "This calculates interest accrued from the last checkpointed block   up to the current block and writes new checkpoint to storage."
      },
      "allowance(address,address)": {
        "params": {
          "owner": "The address of the account which owns the tokens to be spent",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "The number of tokens allowed to be spent (-1 means infinite)"
        }
      },
      "approve(address,uint256)": {
        "details": "This will overwrite the approval amount for `spender`  and is subject to issues noted [here](https://eips.ethereum.org/EIPS/eip-20#approve)",
        "params": {
          "amount": "The number of tokens that are approved (uint256.max means infinite)",
          "spender": "The address of the account which may transfer tokens"
        },
        "returns": {
          "_0": "Whether or not the approval succeeded"
        }
      },
      "balanceOf(address)": {
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The number of tokens owned by `owner`"
        }
      },
      "balanceOfUnderlying(address)": {
        "details": "This also accrues interest in a transaction",
        "params": {
          "owner": "The address of the account to query"
        },
        "returns": {
          "_0": "The amount of underlying owned by `owner`"
        }
      },
      "borrow(uint256)": {
        "params": {
          "borrowAmount": "The amount of the underlying asset to borrow"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "borrowBalanceCurrent(address)": {
        "params": {
          "account": "The address whose balance should be calculated after updating borrowIndex"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowBalanceStored(address)": {
        "params": {
          "account": "The address whose balance should be calculated"
        },
        "returns": {
          "_0": "The calculated balance"
        }
      },
      "borrowRatePerBlock()": {
        "returns": {
          "_0": "The borrow interest rate per block, scaled by 1e18"
        }
      },
      "exchangeRateCurrent()": {
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "exchangeRateStored()": {
        "details": "This function does not accrue interest before calculating the exchange rate",
        "returns": {
          "_0": "Calculated exchange rate scaled by 1e18"
        }
      },
      "getAccountSnapshot(address)": {
        "details": "This is used by comptroller to more efficiently perform liquidity checks.",
        "params": {
          "account": "Address of the account to snapshot"
        },
        "returns": {
          "_0": "(possible error, token balance, borrow balance, exchange rate mantissa)"
        }
      },
      "getCash()": {
        "returns": {
          "_0": "The quantity of underlying asset owned by this contract"
        }
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "ERC-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "ERC-20 name of this token",
          "symbol_": "ERC-20 symbol of this token",
          "underlying_": "The address of the underlying asset"
        }
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "params": {
          "comptroller_": "The address of the Comptroller",
          "decimals_": "EIP-20 decimal precision of this token",
          "initialExchangeRateMantissa_": "The initial exchange rate, scaled by 1e18",
          "interestRateModel_": "The address of the interest rate model",
          "name_": "EIP-20 name of this token",
          "symbol_": "EIP-20 symbol of this token"
        }
      },
      "liquidateBorrow(address,address)": {
        "details": "Reverts upon any failure",
        "params": {
          "borrower": "The borrower of this cToken to be liquidated",
          "cTokenCollateral": "The market in which to seize collateral from the borrower"
        }
      },
      "mint()": {
        "details": "Reverts upon any failure"
      },
      "redeem(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemTokens": "The number of cTokens to redeem into underlying"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "redeemUnderlying(uint256)": {
        "details": "Accrues interest whether or not the operation succeeds, unless reverted",
        "params": {
          "redeemAmount": "The amount of underlying to redeem"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "repayBorrowBehalf(address)": {
        "params": {
          "borrower": "the account with the debt being payed off"
        }
      },
      "seize(address,address,uint256)": {
        "details": "Will fail unless called by another cToken during the process of liquidation.  Its absolutely critical to use msg.sender as the borrowed cToken and not a parameter.",
        "params": {
          "borrower": "The account having collateral seized",
          "liquidator": "The account receiving seized collateral",
          "seizeTokens": "The number of cTokens to seize"
        },
        "returns": {
          "_0": "uint 0=success, otherwise a failure (see ErrorReporter.sol for details)"
        }
      },
      "supplyRatePerBlock()": {
        "returns": {
          "_0": "The supply interest rate per block, scaled by 1e18"
        }
      },
      "totalBorrowsCurrent()": {
        "returns": {
          "_0": "The total borrows with interest"
        }
      },
      "transfer(address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      },
      "transferFrom(address,address,uint256)": {
        "params": {
          "amount": "The number of tokens to transfer",
          "dst": "The address of the destination account",
          "src": "The address of the source account"
        },
        "returns": {
          "_0": "Whether or not the transfer succeeded"
        }
      }
    },
    "title": "Compound's CErc20Delegate Contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "AccrueInterest(uint256,uint256,uint256,uint256)": {
        "notice": "Event emitted when interest is accrued"
      },
      "Approval(address,address,uint256)": {
        "notice": "EIP20 Approval event"
      },
      "Borrow(address,uint256,uint256,uint256)": {
        "notice": "Event emitted when underlying is borrowed"
      },
      "LiquidateBorrow(address,address,uint256,address,uint256)": {
        "notice": "Event emitted when a borrow is liquidated"
      },
      "Mint(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are minted"
      },
      "NewAdmin(address,address)": {
        "notice": "Event emitted when pendingAdmin is accepted, which means admin is updated"
      },
      "NewComptroller(address,address)": {
        "notice": "Event emitted when comptroller is changed"
      },
      "NewMarketInterestRateModel(address,address)": {
        "notice": "Event emitted when interestRateModel is changed"
      },
      "NewPendingAdmin(address,address)": {
        "notice": "Event emitted when pendingAdmin is changed"
      },
      "NewReserveFactor(uint256,uint256)": {
        "notice": "Event emitted when the reserve factor is changed"
      },
      "Redeem(address,uint256,uint256)": {
        "notice": "Event emitted when tokens are redeemed"
      },
      "RepayBorrow(address,address,uint256,uint256,uint256)": {
        "notice": "Event emitted when a borrow is repaid"
      },
      "ReservesAdded(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are added"
      },
      "ReservesReduced(address,uint256,uint256)": {
        "notice": "Event emitted when the reserves are reduced"
      },
      "Transfer(address,address,uint256)": {
        "notice": "EIP20 Transfer event"
      }
    },
    "kind": "user",
    "methods": {
      "_acceptAdmin()": {
        "notice": "Accepts transfer of admin rights. msg.sender must be pendingAdmin"
      },
      "_becomeImplementation(bytes)": {
        "notice": "Called by the delegator on a delegate to initialize it for duty"
      },
      "_reduceReserves(uint256)": {
        "notice": "Accrues interest and reduces reserves by transferring to admin"
      },
      "_resignImplementation()": {
        "notice": "Called by the delegator on a delegate to forfeit its responsibility"
      },
      "_setComptroller(address)": {
        "notice": "Sets a new comptroller for the market"
      },
      "_setInterestRateModel(address)": {
        "notice": "accrues interest and updates the interest rate model using _setInterestRateModelFresh"
      },
      "_setPendingAdmin(address)": {
        "notice": "Begins transfer of admin rights. The newPendingAdmin must call `_acceptAdmin` to finalize the transfer."
      },
      "_setReserveFactor(uint256)": {
        "notice": "accrues interest and sets a new reserve factor for the protocol using _setReserveFactorFresh"
      },
      "accrualBlockNumber()": {
        "notice": "Block number that interest was last accrued at"
      },
      "accrueInterest()": {
        "notice": "Applies accrued interest to total borrows and reserves"
      },
      "admin()": {
        "notice": "Administrator for this contract"
      },
      "allowance(address,address)": {
        "notice": "Get the current allowance from `owner` for `spender`"
      },
      "approve(address,uint256)": {
        "notice": "Approve `spender` to transfer up to `amount` from `src`"
      },
      "balanceOf(address)": {
        "notice": "Get the token balance of the `owner`"
      },
      "balanceOfUnderlying(address)": {
        "notice": "Get the underlying balance of the `owner`"
      },
      "borrow(uint256)": {
        "notice": "Sender borrows assets from the protocol to their own address"
      },
      "borrowBalanceCurrent(address)": {
        "notice": "Accrue interest to updated borrowIndex and then calculate account's borrow balance using the updated borrowIndex"
      },
      "borrowBalanceStored(address)": {
        "notice": "Return the borrow balance of account based on stored data"
      },
      "borrowIndex()": {
        "notice": "Accumulator of the total earned interest rate since the opening of the market"
      },
      "borrowRatePerBlock()": {
        "notice": "Returns the current per-block borrow interest rate for this cToken"
      },
      "comptroller()": {
        "notice": "Contract which oversees inter-cToken operations"
      },
      "constructor": {
        "notice": "Construct an empty delegate"
      },
      "decimals()": {
        "notice": "EIP-20 token decimals for this token"
      },
      "exchangeRateCurrent()": {
        "notice": "Accrue interest then return the up-to-date exchange rate"
      },
      "exchangeRateStored()": {
        "notice": "Calculates the exchange rate from the underlying to the CToken"
      },
      "getAccountSnapshot(address)": {
        "notice": "Get a snapshot of the account's balances, and the cached exchange rate"
      },
      "getCash()": {
        "notice": "Get cash balance of this cToken in the underlying asset"
      },
      "implementation()": {
        "notice": "Implementation address for this contract"
      },
      "initialize(address,address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the new money market"
      },
      "initialize(address,address,uint256,string,string,uint8)": {
        "notice": "Initialize the money market"
      },
      "interestRateModel()": {
        "notice": "Model which tells what the current interest rate should be"
      },
      "isCToken()": {
        "notice": "Indicator that this is a CToken contract (for inspection)"
      },
      "liquidateBorrow(address,address)": {
        "notice": "The sender liquidates the borrowers collateral.  The collateral seized is transferred to the liquidator."
      },
      "mint()": {
        "notice": "Sender supplies assets into the market and receives cTokens in exchange"
      },
      "name()": {
        "notice": "EIP-20 token name for this token"
      },
      "pendingAdmin()": {
        "notice": "Pending administrator for this contract"
      },
      "protocolSeizeShareMantissa()": {
        "notice": "Share of seized collateral that is added to reserves"
      },
      "redeem(uint256)": {
        "notice": "Sender redeems cTokens in exchange for the underlying asset"
      },
      "redeemUnderlying(uint256)": {
        "notice": "Sender redeems cTokens in exchange for a specified amount of underlying asset"
      },
      "repayBorrow()": {
        "notice": "Sender repays their own borrow"
      },
      "repayBorrowBehalf(address)": {
        "notice": "Sender repays a borrow belonging to borrower"
      },
      "reserveFactorMantissa()": {
        "notice": "Fraction of interest currently set aside for reserves"
      },
      "seize(address,address,uint256)": {
        "notice": "Transfers collateral tokens (this market) to the liquidator."
      },
      "supplyRatePerBlock()": {
        "notice": "Returns the current per-block supply interest rate for this cToken"
      },
      "symbol()": {
        "notice": "EIP-20 token symbol for this token"
      },
      "totalBorrows()": {
        "notice": "Total amount of outstanding borrows of the underlying in this market"
      },
      "totalBorrowsCurrent()": {
        "notice": "Returns the current total borrows plus accrued interest"
      },
      "totalReserves()": {
        "notice": "Total amount of reserves of the underlying held in this market"
      },
      "totalSupply()": {
        "notice": "Total number of tokens in circulation"
      },
      "transfer(address,uint256)": {
        "notice": "Transfer `amount` tokens from `msg.sender` to `dst`"
      },
      "transferFrom(address,address,uint256)": {
        "notice": "Transfer `amount` tokens from `src` to `dst`"
      },
      "underlying()": {
        "notice": "Underlying asset for this CToken"
      }
    },
    "notice": "CTokens which wrap an EIP-20 underlying and are delegated to",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 14755,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "_notEntered",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 14758,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 14761,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "symbol",
        "offset": 0,
        "slot": "2",
        "type": "t_string_storage"
      },
      {
        "astId": 14764,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "decimals",
        "offset": 0,
        "slot": "3",
        "type": "t_uint8"
      },
      {
        "astId": 14773,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "admin",
        "offset": 1,
        "slot": "3",
        "type": "t_address_payable"
      },
      {
        "astId": 14776,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "pendingAdmin",
        "offset": 0,
        "slot": "4",
        "type": "t_address_payable"
      },
      {
        "astId": 14780,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "comptroller",
        "offset": 0,
        "slot": "5",
        "type": "t_contract(ComptrollerInterface)15435"
      },
      {
        "astId": 14784,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "interestRateModel",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(InterestRateModel)15785"
      },
      {
        "astId": 14786,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "initialExchangeRateMantissa",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 14789,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "reserveFactorMantissa",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      },
      {
        "astId": 14792,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "accrualBlockNumber",
        "offset": 0,
        "slot": "9",
        "type": "t_uint256"
      },
      {
        "astId": 14795,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "borrowIndex",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 14798,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "totalBorrows",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 14801,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "totalReserves",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 14804,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "totalSupply",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 14808,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "accountTokens",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 14814,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "transferAllowances",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 14824,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "accountBorrows",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_struct(BorrowSnapshot)14819_storage)"
      },
      {
        "astId": 15147,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "underlying",
        "offset": 0,
        "slot": "17",
        "type": "t_address"
      },
      {
        "astId": 15216,
        "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
        "label": "implementation",
        "offset": 0,
        "slot": "18",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ComptrollerInterface)15435": {
        "encoding": "inplace",
        "label": "contract ComptrollerInterface",
        "numberOfBytes": "20"
      },
      "t_contract(InterestRateModel)15785": {
        "encoding": "inplace",
        "label": "contract InterestRateModel",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_struct(BorrowSnapshot)14819_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct CTokenStorage.BorrowSnapshot)",
        "numberOfBytes": "32",
        "value": "t_struct(BorrowSnapshot)14819_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(BorrowSnapshot)14819_storage": {
        "encoding": "inplace",
        "label": "struct CTokenStorage.BorrowSnapshot",
        "members": [
          {
            "astId": 14816,
            "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
            "label": "principal",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 14818,
            "contract": "contracts/CWrappedNativeDelegate.sol:CWrappedNativeDelegate",
            "label": "interestIndex",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}